mean=predict(model, newdata=testData),
sd=stdev))
estimates <- c(estimates, densities)
}
return(estimates)
}
langs = c("du", "en", "fi", "ge", "gr", "he", "it", "ko", "sp", "tr", "ru")
regression_names = c("fl", "fls", "fle", "flm", "flse", "flem", "flsm", "flsem")
#f = freq, l = len, s = surp, e = ent, m = margin
regression_forms = c(
"psychometric ~ freq + prev_freq + len + prev_len",
"psychometric ~ surp + prev_surp + freq + prev_freq + len + prev_len",
"psychometric ~ ent + prev_ent + freq + prev_freq + len + prev_len",
"psychometric ~ margin + prev_margin + freq + prev_freq + len + prev_len",
"psychometric ~ surp + prev_surp + ent + prev_ent + freq + prev_freq + len + prev_len",
"psychometric ~ ent + prev_ent + margin + prev_margin + freq + prev_freq + len + prev_len",
"psychometric ~ surp + prev_surp + margin + prev_margin + freq + prev_freq + len + prev_len"#,
#"psychometric ~ surp + prev_surp + ent + prev_ent + margin + prev_margin + freq + prev_freq + len + prev_len"
)
dll_xlang_df = data.frame()
for (lang in langs) {
df = read_merge_data(lang) %>%
group_by(psychometric, surp, prev_surp, freq, len, prev_freq, prev_len, ent, prev_ent, margin, prev_margin) %>%
summarise(psychometric = mean(psychometric)) %>%
ungroup()
loglik_df = data.frame(names=regression_names, forms=regression_forms) %>%
mutate(logliks = map(regression_forms, model_cross_val, df=df, d_var="psychometric" )) %>%
dplyr::select(-forms)
dlls = list()
options(scipen=999)
dll_df = data.frame()
for (i in regression_names){
for (j in regression_names){
ll1 = loglik_df[loglik_df["names"] == i][2][[1]]
ll2 = loglik_df[loglik_df["names"] == j][2][[1]]
dll = ll1 - ll2
dll = dll[!is.na(dll)]
dll_df = rbind(dll_df, data.frame(comp = paste(i,j, sep="-"), mean = mean(dll),
upper = mean(dll) + (1.96 * std.error(dll)), lower = mean(dll) - (1.96 * std.error(dll)) ))
}
}
dll_xlang_df = rbind(dll_xlang_df, dll_df %>% mutate(lang = lang))
}
langs = c("du", "en", "fi", "ge", "gr", "he", "it", "ko", "sp", "tr", "ru")
#regression_names = c("fl", "fls", "fle", "flm", "flse", "flem", "flsm", "flsem")
regression_names = c("fl", "fls", "fle", "flm", "flse", "flem", "flsm")
#f = freq, l = len, s = surp, e = ent, m = margin
regression_forms = c(
"psychometric ~ freq + prev_freq + len + prev_len",
"psychometric ~ surp + prev_surp + freq + prev_freq + len + prev_len",
"psychometric ~ ent + prev_ent + freq + prev_freq + len + prev_len",
"psychometric ~ margin + prev_margin + freq + prev_freq + len + prev_len",
"psychometric ~ surp + prev_surp + ent + prev_ent + freq + prev_freq + len + prev_len",
"psychometric ~ ent + prev_ent + margin + prev_margin + freq + prev_freq + len + prev_len",
"psychometric ~ surp + prev_surp + margin + prev_margin + freq + prev_freq + len + prev_len"#,
#"psychometric ~ surp + prev_surp + ent + prev_ent + margin + prev_margin + freq + prev_freq + len + prev_len"
)
dll_xlang_df = data.frame()
for (lang in langs) {
df = read_merge_data(lang) %>%
group_by(psychometric, surp, prev_surp, freq, len, prev_freq, prev_len, ent, prev_ent, margin, prev_margin) %>%
summarise(psychometric = mean(psychometric)) %>%
ungroup()
loglik_df = data.frame(names=regression_names, forms=regression_forms) %>%
mutate(logliks = map(regression_forms, model_cross_val, df=df, d_var="psychometric" )) %>%
dplyr::select(-forms)
dlls = list()
options(scipen=999)
dll_df = data.frame()
for (i in regression_names){
for (j in regression_names){
ll1 = loglik_df[loglik_df["names"] == i][2][[1]]
ll2 = loglik_df[loglik_df["names"] == j][2][[1]]
dll = ll1 - ll2
dll = dll[!is.na(dll)]
dll_df = rbind(dll_df, data.frame(comp = paste(i,j, sep="-"), mean = mean(dll),
upper = mean(dll) + (1.96 * std.error(dll)), lower = mean(dll) - (1.96 * std.error(dll)) ))
}
}
dll_xlang_df = rbind(dll_xlang_df, dll_df %>% mutate(lang = lang))
}
plot_df = dll_xlang_df %>%
separate( comp, into=c("target", "control"), sep="-" ) %>%
mutate(target = factor(target, levels = c("fl", "fls", "fle", "flm", "flse", "flem", "flsm", "flsem"))) %>%
mutate(control = factor(control, levels = c("fl", "fls", "fle", "flm", "flse", "flem", "flsm", "flsem"))) %>%
filter(control == "fl") %>%
filter(target %in% c("fls", "fle", "flm"))
plot_df %>%
ggplot(aes(x = lang, y = mean, color = target)) +
geom_hline(yintercept=0, color="blue", linetype="dashed", alpha =0.5) +
geom_point(position = position_dodge(width = 0.6)) +
geom_errorbar(aes(ymin=lower, ymax=upper), width = 0.1, position = position_dodge(width = 0.6)) +
ylab("ΔLogLiklihood (per word)") +
xlab("Language") +
scale_color_discrete(labels = c("Surprisal", "Entropy", "Surp/Ent Margin"))
ggsave("./xlang_dll.png", width = 8, height = 4)
plot_df = dll_xlang_df %>%
separate( comp, into=c("target", "control"), sep="-" ) %>%
mutate(target = factor(target, levels = c("fl", "fls", "fle", "flm", "flse", "flem", "flsm", "flsem"))) %>%
mutate(control = factor(control, levels = c("fl", "fls", "fle", "flm", "flse", "flem", "flsm", "flsem"))) %>%
filter(control %in% c("fls", "fle")) %>%
filter(target %in% c("flse"))
plot_df %>%
mutate(control = if_else(control == "fls", "Baseline: Surprisal Only", "Baseline: Entropy Only")) %>%
ggplot(aes(x = lang, y = mean, color = control)) +
geom_hline(yintercept=0, color="blue", linetype="dashed", alpha =0.5) +
geom_point(position = position_dodge(width = 0.6)) +
geom_errorbar(aes(ymin=lower, ymax=upper), width = 0.1, position = position_dodge(width = 0.6)) +
ggtitle("ΔLL for Model w/ Entropy & Surprisal") +
ylab("ΔLogLiklihood (per word)") +
xlab("Language") +
facet_wrap(~control) +
theme(legend.position = "none")
ggsave("./xlang_fles.png", width = 8, height = 4)
merged_df
lang = "en"
merged_df = read_merge_data(lang)
merged_df
merged_df = read_merge_data(lang)
m_gam = gam(psychometric ~ s(surp, bs = 'cr', k = 10) + s(prev_surp, bs = 'cr', k = 10) + s(ent, bs = 'cr', k = 10) + s(prev_ent, bs = 'cr', k = 10) + s(margin, bs = 'cr', k = 10) + s(prev_margin, bs = 'cr', k = 10) + te(freq, len, bs = 'cr') + te(prev_freq, prev_len, bs = 'cr'), data = df)
summary(m_gam)
sum_gam = summary(m_gam)
sum_gam
sum_gam$pTerms.table
sum_gam
sum_gam$p.coeff
sum_gam$p.coeff[3]
sum_gam$p.coeff[2]
sum_gam
sum_gam$coeff[2]
sum_gam
sum_gam$pTerms.df
sum_gam
sum_gam$coefficients
sum_gam
sum_gam$coefficients
sum_gam$s.table
sum_gam$s.table[1,5]
sum_gam$s.table[1,4]
sum_gam$s.table[2,4]
sum_gam$s.table
langs = c("du", "en", "fi", "ge", "gr", "he", "it", "ko", "sp", "tr", "ru")
predictors = c("surp", "ent", "margin")
gam_results = data.frame()
for (lang in langs) {
merged_df = read_merge_data(lang)
m_gam = gam(psychometric ~ s(surp, bs = 'cr', k = 10) + s(prev_surp, bs = 'cr', k = 10) + s(ent, bs = 'cr', k = 10) + s(prev_ent, bs = 'cr', k = 10) + s(margin, bs = 'cr', k = 10) + s(prev_margin, bs = 'cr', k = 10) + te(freq, len, bs = 'cr') + te(prev_freq, prev_len, bs = 'cr'), data = df)
ctab = summary(m_gam)$s.table
gam_results = rbind(gam_results, data.frame( lang = lang, p_surp = ctab[1,4], p_prev_surp = ctab[2,4],
p_ent = ctab[3, 4], p_prev_ent = ctab[4,4],
p_margin = ctab[5,4], p_prev_margin = ctab[6,4],
p_freqlen = ctab[7,4], p_prev_freqlen=ctab[8,4]))
}
gam_results
gam_results = data.frame()
for (lang in langs) {
merged_df = read_merge_data(lang)
m_gam = gam(psychometric ~ s(surp, bs = 'cr', k = 10) + s(prev_surp, bs = 'cr', k = 10) + s(ent, bs = 'cr', k = 10) + s(prev_ent, bs = 'cr', k = 10) + s(margin, bs = 'cr', k = 10) + s(prev_margin, bs = 'cr', k = 10) + te(freq, len, bs = 'cr') + te(prev_freq, prev_len, bs = 'cr'), data = df)
ctab = summary(m_gam)$s.table
print(ctab)
gam_results = rbind(gam_results, data.frame( lang = lang, p_surp = ctab[1,4], p_prev_surp = ctab[2,4],
p_ent = ctab[3, 4], p_prev_ent = ctab[4,4],
p_margin = ctab[5,4], p_prev_margin = ctab[6,4],
p_freqlen = ctab[7,4], p_prev_freqlen=ctab[8,4]))
}
langs = c("du", "en", "fi", "ge", "gr", "he", "it", "ko", "sp", "tr", "ru")
langs = c("du", "en")
gam_results = data.frame()
for (lang in langs) {
merged_df = read_merge_data(lang)
m_gam = gam(psychometric ~ s(surp, bs = 'cr', k = 10) + s(prev_surp, bs = 'cr', k = 10) + s(ent, bs = 'cr', k = 10) + s(prev_ent, bs = 'cr', k = 10) + s(margin, bs = 'cr', k = 10) + s(prev_margin, bs = 'cr', k = 10) + te(freq, len, bs = 'cr') + te(prev_freq, prev_len, bs = 'cr'), data = merged_df)
ctab = summary(m_gam)$s.table
gam_results = rbind(gam_results, data.frame( lang = lang, p_surp = ctab[1,4], p_prev_surp = ctab[2,4],
p_ent = ctab[3, 4], p_prev_ent = ctab[4,4],
p_margin = ctab[5,4], p_prev_margin = ctab[6,4],
p_freqlen = ctab[7,4], p_prev_freqlen=ctab[8,4]))
}
gam_results
langs = c("du", "en", "fi", "ge", "gr", "he", "it", "ko", "sp", "tr", "ru")
gam_results = data.frame()
for (lang in langs) {
merged_df = read_merge_data(lang)
m_gam = gam(psychometric ~ s(surp, bs = 'cr', k = 10) + s(prev_surp, bs = 'cr', k = 10) + s(ent, bs = 'cr', k = 10) + s(prev_ent, bs = 'cr', k = 10) + s(margin, bs = 'cr', k = 10) + s(prev_margin, bs = 'cr', k = 10) + te(freq, len, bs = 'cr') + te(prev_freq, prev_len, bs = 'cr'), data = merged_df)
ctab = summary(m_gam)$s.table
gam_results = rbind(gam_results, data.frame( lang = lang, p_surp = ctab[1,4], p_prev_surp = ctab[2,4],
p_ent = ctab[3, 4], p_prev_ent = ctab[4,4],
p_margin = ctab[5,4], p_prev_margin = ctab[6,4],
p_freqlen = ctab[7,4], p_prev_freqlen=ctab[8,4]))
}
gam_results
lang = "du"
merged_df = read_merge_data(lang)
m_gam = gam(psychometric ~ s(surp, bs = 'cr', k = 10) + s(prev_surp, bs = 'cr', k = 10) + s(ent, bs = 'cr', k = 10) + s(prev_ent, bs = 'cr', k = 10) + s(margin, bs = 'cr', k = 10) + s(prev_margin, bs = 'cr', k = 10) + te(freq, len, bs = 'cr') + te(prev_freq, prev_len, bs = 'cr'), data = merged_df)
ctab = summary(m_gam)$s.table
ctab
lang = "it"
merged_df = read_merge_data(lang)
m_gam = gam(psychometric ~ s(surp, bs = 'cr', k = 10) + s(prev_surp, bs = 'cr', k = 10) + s(ent, bs = 'cr', k = 10) + s(prev_ent, bs = 'cr', k = 10) + s(margin, bs = 'cr', k = 10) + s(prev_margin, bs = 'cr', k = 10) + te(freq, len, bs = 'cr') + te(prev_freq, prev_len, bs = 'cr'), data = merged_df)
ctab = summary(m_gam)$s.table
ctab
lang = "it"
merged_df = read_merge_data(lang)
m_gam = gam(psychometric ~ s(surp, bs = 'cr', k = 10) + s(prev_surp, bs = 'cr', k = 10) + s(ent, bs = 'cr', k = 10) + s(prev_ent, bs = 'cr', k = 10) + s(margin, bs = 'cr', k = 10) + s(prev_margin, bs = 'cr', k = 10) + te(freq, len, bs = 'cr') + te(prev_freq, prev_len, bs = 'cr'), data = merged_df, REML=F)
ctab = summary(m_gam)$s.table
ctab
langs = c("du", "en", "fi", "ge", "gr", "he", "it", "ko", "sp", "tr", "ru")
gam_results = data.frame()
for (lang in langs) {
merged_df = read_merge_data(lang)
m_gam = gam(psychometric ~ s(surp, bs = 'cr', k = 10) + s(prev_surp, bs = 'cr', k = 10) + s(ent, bs = 'cr', k = 10) + s(prev_ent, bs = 'cr', k = 10) + s(margin, bs = 'cr', k = 10) + s(prev_margin, bs = 'cr', k = 10) + te(freq, len, bs = 'cr') + te(prev_freq, prev_len, bs = 'cr'), data = merged_df, REML=F)
ctab = summary(m_gam)$s.table
gam_results = rbind(gam_results, data.frame( lang = lang, p_surp = ctab[1,4], p_prev_surp = ctab[2,4],
p_ent = ctab[3, 4], p_prev_ent = ctab[4,4],
p_margin = ctab[5,4], p_prev_margin = ctab[6,4],
p_freqlen = ctab[7,4], p_prev_freqlen=ctab[8,4]))
}
gam_results
options(digits = 5)
gam_results
options(digits = 3)
gam_results
options(digits = 3)
gam_results
pval = function(data) {
pval_data = mutate(data = case_when(
data < 0.05 ~ "*"
))
return (pval_data)
}
options(digits = 3)
gam_results %>%
mutate(p_surp = pval(psurp))
pval = function(data) {
pval_data = mutate(data = case_when(
data < 0.05 ~ "*"
))
return (pval_data)
}
options(digits = 3)
gam_results %>%
mutate(p_surp = pval(p_surp))
gam_results
pval = function(data) {
pval_data = mutate(data = case_when(
data < 0.05 ~ "*",
else ~ "x"
pval = function(data) {
pval_data = mutate(data = case_when(
data < 0.05 ~ "*"
))
return (pval_data)
}
options(digits = 3)
gam_results %>%
mutate(p_surp = pval(p_surp))
write_pvals = function(data) {
print(data)
pval_data = mutate(data = case_when(
data < 0.05 ~ "*"
))
return (pval_data)
}
gam_results %>%
mutate(p_surp = write_pvals(p_surp))
write_pvals = function(data) {
print(data)
pval_data = data %>%
mutate(data = case_when(
data < 0.05 ~ "*"
))
return (pval_data)
}
gam_results %>%
mutate(p_surp = write_pvals(p_surp))
write_pvals = function(data) {
print(data)
pval_data = data %>%
case_when(
data < 0.05 ~ "*"
)
return (pval_data)
}
gam_results %>%
mutate(p_surp = write_pvals(p_surp))
write_pvals = function(data) {
print(data)
pval_data = data %>% mutate(data = if_else(data < 0.05, "*", "N.S."))
return (pval_data)
}
gam_results %>%
mutate(p_surp = write_pvals(p_surp))
gam_results %>%
apply(function(x) mutate(x = if_else(x<0.05, "*", "N.S.")) )
gam_results %>%
apply(., 2, function(x) mutate(x = if_else(x<0.05, "*", "N.S.")) )
gam_results
pvals = gam_results[,2:]
gam_results
pvals = gam_results[,2:8]
pvals
pvals = gam_results[,2:8]
pvals %>%
apply(., 2, function(x) mutate(x = if_else(x<0.05, "*", "N.S.")) )
pvals
pvals = gam_results[,2:8]
pvals %>%
apply(., 2, function(x) if_else(x<0.05, "*", "N.S."))
gam_results %>%
apply(., 2, function(x) if_else(x<0.05, "*", "N.S."))
pvals = gam_results[,2:8]
pval_code = gam_results %>%
apply(., 2, function(x) if_else(x<0.05, "*", "N.S."))
pval_code
pvals = gam_results[,2:8]
pval_code = gam_results %>%
apply(., 2, function(x) if_else(x<0.05, "*", "N.S."))
val_code = data.frame(pval_code)
val_code
pvals = gam_results[,2:8]
pval_code = gam_results %>%
apply(., 2, function(x) case_when(
x > 0.05 ~ "N.S",
x<0.05 & x>0.01 ~ "*",
x < 0.01 & x > 0.001 ~ "**",
x < 0.001 ~ ***))
pvals = gam_results[,2:8]
pval_code = gam_results %>%
apply(., 2, function(x) case_when(
x > 0.05 ~ "N.S",
x<0.05 & x>0.01 ~ "*",
x < 0.01 & x > 0.001 ~ "**",
x < 0.001 ~ ***)))
pvals = gam_results[,2:8]
pval_code = gam_results %>%
apply(., 2, function(x) case_when( x > 0.05 ~ "N.S", x<0.05 & x>0.01 ~ "*", x < 0.01 & x > 0.001 ~ "**", x < 0.001 ~ "***", "x"))
pvals = gam_results[,2:8]
pval_code = gam_results %>%
apply(., 2, function(x) case_when( x > 0.05 ~ "N.S", (x<0.05 & x>0.01) ~ "*", (x < 0.01 & x > 0.001) ~ "**", x < 0.001 ~ "***"))
pval_code = data.frame(pval_code)
pval_code
pvals = gam_results[,2:8]
pval_code = gam_results %>%
apply(., 2, function(x) case_when( x > 0.05 ~ "N.S", (x<0.05 & x>0.01) ~ "*", (x < 0.01 & x > 0.001) ~ "**", x < 0.001 ~ "***"))
pval_code = data.frame(pval_code)
pval_code
pvals = gam_results[,2:8]
pval_code = pvals %>%
apply(., 2, function(x) case_when( x > 0.05 ~ "N.S", (x<0.05 & x>0.01) ~ "*", (x < 0.01 & x > 0.001) ~ "**", x < 0.001 ~ "***"))
pval_code = data.frame(pval_code)
cbind(gam_results["lang"], pval_code)
pvals = gam_results[,1:8]
pval_code = pvals %>%
apply(., 2, function(x) case_when( x > 0.05 ~ "N.S", (x<0.05 & x>0.01) ~ "*", (x < 0.01 & x > 0.001) ~ "**", x < 0.001 ~ "***"))
pval_code = data.frame(pval_code)
cbind(gam_results["lang"], pval_code)
lang = "en"
m_gam = gam(psychometric ~ s(surp, bs = 'cr', k = 10) + s(prev_surp, bs = 'cr', k = 10) + s(ent, bs = 'cr', k = 10) + s(prev_ent, bs = 'cr', k = 10) + s(margin, bs = 'cr', k = 10) + s(prev_margin, bs = 'cr', k = 10) + te(freq, len, bs = 'cr') + te(prev_freq, prev_len, bs = 'cr'), data = merged_df, REML=F)
ctab = summary(m_gam)$s.table
ctab
ctab = summary(m_gam)$s.table[0]
ctab = summary(m_gam)$s.table[1]
ctab
ctab = summary(m_gam)$s.table[1, 4]
ctab
ctab = summary(m_gam)$s.table[0, 4]
ctab
ctab
shhh <- suppressPackageStartupMessages # It's a library, so shhh!
shhh(library( mgcv ))
shhh(library(dplyr))
shhh(library(ggplot2))
shhh(library(lme4))
shhh(library(tidymv))
shhh(library(gamlss))
shhh(library(gsubfn))
shhh(library(lmerTest))
shhh(library(tidyverse))
shhh(library(boot))
shhh(library(rsample))
shhh(library(plotrix))
theme_set(theme_bw())
options(digits=4)
set.seed(444)
all_df = data.frame()
for (lang in langs) {
merged_df = read_merge_data(lang)
all_df = append(all_df, merged_df)
}
all_df
all_df = data.frame()
for (lang in langs) {
merged_df = read_merge_data(lang)
all_df = rbind(all_df, merged_df)
}
all_df
all_df = data.frame()
for (lang in langs) {
merged_df = read_merge_data(lang)
all_df = rbind(all_df, merged_df %>% mutate(lang = lang))
}
all_df
all_df %>%
ggplot(aes(x = surp, y = ent)) +
geom_point() +
facet_wrap(~lang)
all_df %>%
ggplot(aes(x = surp, y = ent, color = lang)) +
geom_point(alpha = 0.05) +
facet_wrap(~lang) +
theme(
legend.position = "none"
)
all_df %>%
filter(lang == "en") %>%
ggplot(aes(x = surp, y = ent, color = lang)) +
geom_point(alpha = 0.005) +
stat_smooth() +
facet_wrap(~lang) +
theme(
legend.position = "none"
)
all_df %>%
filter(lang == "en") %>%
ggplot(aes(x = surp, y = ent, color = lang)) +
geom_point(alpha = 0.005) +
stat_smooth() +
facet_wrap(~lang) +
theme(
legend.position = "none"
)
all_df %>%
ggplot(aes(x = surp, y = ent, color = lang)) +
geom_point(alpha = 0.008) +
stat_smooth() +
facet_wrap(~lang) +
theme(
legend.position = "none"
)
all_df %>%
ggplot(aes(x = surp, y = ent, color = lang)) +
geom_point(alpha = 0.001) +
stat_smooth() +
facet_wrap(~lang) +
theme(
legend.position = "none"
)
all_df %>%
ggplot(aes(x = surp, y = ent, color = lang)) +
geom_point(alpha = 0.005) +
stat_smooth() +
facet_wrap(~lang) +
theme(
legend.position = "none"
)
all_df %>%
ggplot(aes(x = surp, y = ent, color = lang)) +
geom_point(alpha = 0.006) +
stat_smooth() +
facet_wrap(~lang) +
theme(
legend.position = "none"
)
cor.test(surp, ent)
all_df %>%
group_by(lang) %>%
cor.test(surp, ent) %>%
ungroup
ggsave("./surp_ent_corr.png", width = 5, height = 4)
all_df %>%
ggplot(aes(x = surp, y = ent, color = lang)) +
geom_point(alpha = 0.006) +
stat_smooth() +
facet_wrap(~lang) +
theme(
legend.position = "none"
)
ggsave("./surp_ent_corr.png", width = 5, height = 4)
all_df %>%
group_by(lang) %>%
cor.test(surp, ent) %>%
ungroup
all_df
all_df %>%
group_by(lang) %>%
cor.test(.$surp, .$ent) %>%
ungroup
all_df %>%
group_by(lang) %>%
cor.test(x = .$surp, y= .$ent) %>%
ungroup
all_df %>%
group_by(lang) %>%
cor.test(x = surp, y = ent) %>%
ungroup
all_df
cor.test(all_df$surp, all_df$ent)
shhh <- suppressPackageStartupMessages # It's a library, so shhh!
shhh(library( mgcv ))
shhh(library(dplyr))
shhh(library(ggplot2))
shhh(library(lme4))
shhh(library(tidymv))
shhh(library(gamlss))
shhh(library(gsubfn))
shhh(library(lmerTest))
shhh(library(tidyverse))
shhh(library(boot))
shhh(library(rsample))
shhh(library(plotrix))
theme_set(theme_bw())
options(digits=4)
set.seed(444)
