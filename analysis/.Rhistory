mutate(psychometric = case_when(psychometric == "firstfix_rt" ~ "First Fixation",
psychometric == "gaze_rt" ~ "Gaze Duration",
psychometric == "total_rt" ~ "Total Fixation")) %>%
mutate(model = case_when(model == "mgpt_lc" ~ "mGPT",
model == "monot_all" ~ "monoT (all)",
model == "monot_30m" ~ "monoT (30m)")) %>%
mutate(model = factor(model, levels = c("mGPT", "monoT (all)", "monoT (30m)"))) %>%
ggplot(aes(x = psychometric, y = mean, color = psychometric)) +
geom_hline(yintercept=0, color="black", linetype="dashed", alpha =0.5) +
geom_point(position = position_dodge(width = 0.6)) +
geom_text(aes(y = 0.08, label = sig), size = 3, show.legend = FALSE) +
geom_errorbar(aes(ymin=lower, ymax=upper), width = 0.1, position = position_dodge(width = 0.6)) +
ylab("Delta Log Liklihood (average  per word)") +
xlab("") +
facet_grid(model~lang) +
labs(color = "Eye Movement Measure") +
#scale_x_discrete(labels = c(bquote(w[t-2]), bquote(w[t-1]), bquote(w[t]))) +
#scale_color_manual(values = c("#a1dab4", "#41b6c4", "#225ea8")) +
#ggtitle("Contribution of Surprisal to Î”LL") +
theme(
text = element_text(family="serif"),
legend.position = "bottom",
axis.title.x = element_blank(),
axis.text.x = element_blank()#,
#panel.border = element_rect(color = "grey", fill =  NA, size = 0.5)
)
#ggsave("./images/dll_surprisal.pdf", device = "pdf", width = 9.2, height = 4)
lang_ppl = data.frame( lang = c("du", "en", "fi", "ge", "gr", "he", "it", "ko", "ru", "sp", "tr"  ),
family = c("Indo-European", "Indo-European", "Uralic", "Indo-European", "Indo-European", "Semetic", "Indo-European", "Koreanic", "Indo-European", "Indo-European", "Turkic"),
ppl = c(8.78, 16.40, 15.05, 10.88, 7.56, 11.01, 10.53,  10.92, 9.15, 12.93, 9.79 ))
lang_ppl_df = dll_xlang_surp_df %>%
filter(psychometric == "gaze_rt") %>%
merge(lang_ppl, by = "lang") %>%
filter(comp == "target") %>%
dplyr::select(lang, mean, ppl, family, model) %>%
mutate(measure = "Language")
dll_ppl_fam = lang_ppl_df %>%
group_by(family, model) %>%
summarise(mean = mean(mean),
ppl = mean(ppl)) %>%
ungroup() %>%
mutate(lang = family) %>% #just to merge them
mutate(measure = "Language Family")
dll_ppl_plot = rbind(lang_ppl_df, dll_ppl_fam)
mgpt_cor_test = lang_ppl_df %>% filter(model == "mgpt_lc")
cor.test(mgpt_cor_test$mean, mgpt_cor_test$ppl)
dll_ppl_plot %>%
filter(model == "mgpt_lc") %>%
ggplot(aes(x=ppl, y = mean, label = lang, color = measure)) +
geom_smooth(method = "lm") +
geom_point(size = 2) +
#geom_errorbar(aes(ymin=lower, ymax=upper), width = 0.3) +
geom_label_repel(family="serif") +
ylab("Delta Log Liklihood (per word)") +
xlab("Test Perplexity reported in Shliazhko et al. (2022)") +
facet_wrap(~measure, scales = "free_x") +
scale_color_manual(values = c("#41b6c4", "#225ea8")) +
theme(
legend.position = "none",
text = element_text(family="serif")
)
#ggsave("./images/dll_vs_ppl.pdf", device="pdf", width = 5, height = 3)
shhh <- suppressPackageStartupMessages # It's a library, so shhh!
shhh(library( mgcv ))
shhh(library(dplyr))
shhh(library(ggplot2))
shhh(library(lme4))
shhh(library(tidymv))
shhh(library(gamlss))
shhh(library(gsubfn))
shhh(library(lmerTest))
shhh(library(tidyverse))
shhh(library(boot))
shhh(library(rsample))
shhh(library(plotrix))
shhh(library(ggrepel))
shhh(library(mgcv))
library(jmuOutlier) # For paired permutation tests
#options(JULIA_HOME = "/Applications/Julia-1.8.app/Contents/Resources/julia/bin/")
#library(jglmm)
#jglmm_setup()
theme_set(theme_bw())
options(digits=4)
options(dplyr.summarise.inform = FALSE)
set.seed(444)
langs = c("du", "en", "fi", "ge", "gr", "he", "it", "ko", "sp", "tr", "ru")
models = c("mgpt_sc", "mgpt_lc", "monot_30m", "monot_all")
comps = c("target", "baseline")
psychometric = "gaze_rt" # We're only gonna look at one psychometric here
model_cross_val = function(form, df, d_var, num_folds=10){
folds <- cut(seq(1,nrow(df)),breaks=num_folds,labels=FALSE)
estimates <- c()
models <- c()
for(i in 1:num_folds){
testIndexes = which(folds==i,arr.ind=TRUE)
testData = df[testIndexes,]
trainData = df[-testIndexes,]
if(grepl("bs = 'cr'", form, fixed=TRUE)) {
model = gam(as.formula(form), data = trainData)
} else {
model = lm(as.formula(form), data = trainData)
}
stdev = sigma(model)
densities <- log(dnorm(testData[[d_var]],
mean=predict(model, newdata=testData),
sd=stdev))
estimates <- c(estimates, densities)
}
return(estimates)
}
regression_names = c("linear_baseline", "linear_target", "nonlinear_baseline", "nonlinear_target")
dll_raw_df = data.frame()
for (lang in langs) {
print(paste0("Fitting model for ", lang))
for(m in models){
df = read.csv(paste0("../data/merged_data/", lang, ".csv"))%>%
filter(model == m)
regression_forms = c(
# Linear Models
#paste0(psychometric, " ~ freq + prev_freq + len + prev_len"),
paste0(psychometric, " ~ te(freq, len, bs = 'cr') + te(prev_freq, prev_len, bs = 'cr')"),
paste0(psychometric, "~ surp + prev_surp + te(freq, len, bs = 'cr') + te(prev_freq, prev_len, bs = 'cr') "),
# Non-Linear Models
paste0(psychometric, " ~ te(freq, len, bs = 'cr') + te(prev_freq, prev_len, bs = 'cr')"),
paste0(psychometric, "~ s(surp, bs = 'cr', k = 6) + s(prev_surp, bs = 'cr', k = 6) + te(freq, len, bs = 'cr') + te(prev_freq, prev_len, bs = 'cr') ")
)
loglik_df = data.frame(names=regression_names, forms=regression_forms) %>%
mutate(logliks = map(regression_forms, model_cross_val, df=df, d_var=psychometric )) %>%
dplyr::select(-forms)
loglik_df = loglik_df %>% unnest(cols = c(logliks)) %>% mutate(lang = lang, psychometric = psychometric, model = m)
dll_raw_df = rbind(dll_raw_df, loglik_df)
}
}
dll_raw_df = read.csv("./dll_raw_df_stats.csv")
dll_stats_df = data.frame()
dll_comp_stats_df = data.frame()
for (m in models){
for(l in langs){
target_df_linear = dll_raw_df %>% filter(model == m, lang == l, names == "linear_target")
baseline_df_linear = dll_raw_df %>% filter(model == m, lang == l, names == "linear_baseline")
dll_linear = target_df_linear$logliks - baseline_df_linear$logliks
dll_stats_df = rbind(dll_stats_df, data.frame(dll = dll_linear, linear="linear", model = m, lang = l))
target_df_nonlinear = dll_raw_df %>% filter(model == m, lang == l, names == "nonlinear_target")
baseline_df_nonlinear = dll_raw_df %>% filter(model == m, lang == l, names == "nonlinear_baseline")
dll_nonlinear = target_df_nonlinear$logliks- baseline_df_nonlinear$logliks
dll_stats_df = rbind(dll_stats_df, data.frame(dll = dll_nonlinear, linear = "non-linear", model = m, lang = l))
dll_comp_stats_df = rbind(dll_comp_stats_df, data.frame(dll_linear = dll_linear, dll_nonlinear = dll_nonlinear, model = m, lang = l))
}
}
linear_comp_df = data.frame()
for (m in models){
for(l in langs){
target_df_linear = dll_raw_df %>% filter(model == m, lang == l, names == "linear_target")
baseline_df_linear = dll_raw_df %>% filter(model == m, lang == l, names == "linear_baseline")
dll_linear = data.frame(dll = target_df_linear$logliks - baseline_df_linear$logliks) %>%
drop_na() %>%
mutate( m = mean(dll), s=sd(dll)) %>%
filter(dll < m + s * 3, dll > m - s * 3)
dll_linear = dll_linear$dll
#dll_linear = dll_linear[!is.na(dll_linear)]
linear_ttest = perm.test(dll_linear, num.sim = 1)
target_df_nonlinear = dll_raw_df %>% filter(model == m, lang == l, names == "nonlinear_target")
baseline_df_nonlinear = dll_raw_df %>% filter(model == m, lang == l, names == "nonlinear_baseline")
dll_nonlinear = data.frame(dll = target_df_nonlinear$logliks- baseline_df_nonlinear$logliks) %>%
drop_na() %>%
mutate( m = mean(dll), s=sd(dll)) %>%
filter(dll < m + s * 3, dll > m - s * 3)
dll_nonlinear = dll_nonlinear$dll
#dll_nonlinear = dll_nonlinear[!is.na(dll_nonlinear)]
nonlinear_ttest = perm.test(dll_nonlinear, num.sim = 1)
comp_ttest = perm.test(dll_nonlinear, dll_linear, num.sim = 1000)
dll_df_linear = data.frame(
m = mean(dll_linear), upper = mean(dll_linear) + (1.96 * std.error(dll_linear)), lower = mean(dll_linear) - (1.96 * std.error(dll_linear)),
ttest_pval = linear_ttest$p.value,
#Comparison information (moved)
ttest_pval_comp = comp_ttest$p.value,
# Meta info
lang = l, model = m, is_linear = "linear"
)
dll_df_nonlinear = data.frame(
m = mean(dll_nonlinear), upper = mean(dll_nonlinear) + (1.96 * std.error(dll_nonlinear)), lower = mean(dll_nonlinear) - (1.96 * std.error(dll_nonlinear)), ttest_pval = nonlinear_ttest$p.value,
#Comparison information (moved)
ttest_pval_comp = comp_ttest$p.value,
# Meta info
lang = l, model = m, is_linear = "nonlinear"
)
dll_df = rbind(dll_df_linear, dll_df_nonlinear)
linear_comp_df = rbind(linear_comp_df, dll_df)
}
}
linear_comp_df %>%
filter(ttest_pval_comp < 0.05)
linear_comp_df %>%
mutate(lang = factor(lang, levels = c("du", "en", "fi", "ge", "gr", "he", "it", "ko", "ru", "sp", "tr"),
labels = c("Dutch", "English", "Finnish", "German", "Greek", "Hebrew", "Italian", "Korean", "Russian",
"Spanish", "Turkish"))) %>%
mutate(is_linear = if_else(is_linear == "linear", "Linear", "Non-linear")) %>%
#mutate(context = if_else(context == "long", "Long Context", "Short Context")) %>%
ggplot(aes(x = lang, y = m, color = is_linear, shape = is_linear)) +
#geom_hline(yintercept=0, color = "blue") +
geom_point(position = position_dodge(width = 0.5)) +
geom_errorbar(aes(ymin = lower, ymax= upper, width = 0.1), position = position_dodge(width = 0.5)) +
facet_grid(model~., labeller = labeller(model = as_labeller(c(mgpt_lc="mGPT\n(long)", mgpt_sc="mGPT\n(short)", monot_30m="monoT\n(30m)", monot_all="monoT\n(all)")))) +
scale_color_manual(name="Model Type", labels=c("Linear", "Non-linear"), values = c("#6488d6", "#29bc8b")) +
scale_shape_manual(name="Model Type", labels=c("Linear", "Non-linear"), values = c(19, 17)) +
ylab("Delta Log Liklihood (per word)") +
#labs(color = "Model Type") +
#scale_shape(guide = "none") +
theme(
legend.position = "bottom",
axis.title.x = element_blank(),
text = element_text(family = "serif"),
axis.text.x = element_text(angle = 35, hjust = 1)
)
#ggsave("./images/dll_linear_comp.pdf", device ="pdf", width = 4, height = 4)
linear_comp_df
linear_comp_df = data.frame()
for (m in models){
for(l in langs){
target_df_linear = dll_raw_df %>% filter(model == m, lang == l, names == "linear_target")
baseline_df_linear = dll_raw_df %>% filter(model == m, lang == l, names == "linear_baseline")
dll_linear = data.frame(dll = target_df_linear$logliks - baseline_df_linear$logliks) %>%
drop_na() %>%
mutate( m = mean(dll), s=sd(dll)) %>%
filter(dll < m + s * 3, dll > m - s * 3)
dll_linear = dll_linear$dll
#dll_linear = dll_linear[!is.na(dll_linear)]
linear_ttest = perm.test(dll_linear, num.sim = 1)
target_df_nonlinear = dll_raw_df %>% filter(model == m, lang == l, names == "nonlinear_target")
baseline_df_nonlinear = dll_raw_df %>% filter(model == m, lang == l, names == "nonlinear_baseline")
dll_nonlinear = data.frame(dll = target_df_nonlinear$logliks- baseline_df_nonlinear$logliks) %>%
drop_na() %>%
mutate( m = mean(dll), s=sd(dll)) %>%
filter(dll < m + s * 3, dll > m - s * 3)
dll_nonlinear = dll_nonlinear$dll
#dll_nonlinear = dll_nonlinear[!is.na(dll_nonlinear)]
nonlinear_ttest = perm.test(dll_nonlinear, num.sim = 1)
comp_ttest = perm.test(dll_nonlinear, dll_linear, num.sim = 500, paired=T)
dll_df_linear = data.frame(
m = mean(dll_linear), upper = mean(dll_linear) + (1.96 * std.error(dll_linear)), lower = mean(dll_linear) - (1.96 * std.error(dll_linear)),
ttest_pval = linear_ttest$p.value,
#Comparison information (moved)
ttest_pval_comp = comp_ttest$p.value,
# Meta info
lang = l, model = m, is_linear = "linear"
)
dll_df_nonlinear = data.frame(
m = mean(dll_nonlinear), upper = mean(dll_nonlinear) + (1.96 * std.error(dll_nonlinear)), lower = mean(dll_nonlinear) - (1.96 * std.error(dll_nonlinear)), ttest_pval = nonlinear_ttest$p.value,
#Comparison information (moved)
ttest_pval_comp = comp_ttest$p.value,
# Meta info
lang = l, model = m, is_linear = "nonlinear"
)
dll_df = rbind(dll_df_linear, dll_df_nonlinear)
linear_comp_df = rbind(linear_comp_df, dll_df)
}
}
linear_comp_df %>%
filter(ttest_pval_comp < 0.05)
linear_comp_df
linear_comp_df = data.frame()
for (m in models){
for(l in langs){
target_df_linear = dll_raw_df %>% filter(model == m, lang == l, names == "linear_target")
baseline_df_linear = dll_raw_df %>% filter(model == m, lang == l, names == "linear_baseline")
dll_linear = data.frame(dll = target_df_linear$logliks - baseline_df_linear$logliks) %>%
drop_na() %>%
mutate( m = mean(dll), s=sd(dll)) %>%
filter(dll < m + s * 3, dll > m - s * 3)
dll_linear = dll_linear$dll
#dll_linear = dll_linear[!is.na(dll_linear)]
linear_ttest = perm.test(dll_linear, num.sim = 1)
target_df_nonlinear = dll_raw_df %>% filter(model == m, lang == l, names == "nonlinear_target")
baseline_df_nonlinear = dll_raw_df %>% filter(model == m, lang == l, names == "nonlinear_baseline")
dll_nonlinear = data.frame(dll = target_df_nonlinear$logliks- baseline_df_nonlinear$logliks) %>%
drop_na() %>%
mutate( m = mean(dll), s=sd(dll)) %>%
filter(dll < m + s * 3, dll > m - s * 3)
dll_nonlinear = dll_nonlinear$dll
#dll_nonlinear = dll_nonlinear[!is.na(dll_nonlinear)]
nonlinear_ttest = perm.test(dll_nonlinear, num.sim = 1)
comp_ttest = perm.test(dll_nonlinear, dll_linear, num.sim = 1000, paired=T)
dll_df_linear = data.frame(
m = mean(dll_linear), upper = mean(dll_linear) + (1.96 * std.error(dll_linear)), lower = mean(dll_linear) - (1.96 * std.error(dll_linear)),
ttest_pval = linear_ttest$p.value,
#Comparison information (moved)
ttest_pval_comp = comp_ttest$p.value,
# Meta info
lang = l, model = m, is_linear = "linear"
)
dll_df_nonlinear = data.frame(
m = mean(dll_nonlinear), upper = mean(dll_nonlinear) + (1.96 * std.error(dll_nonlinear)), lower = mean(dll_nonlinear) - (1.96 * std.error(dll_nonlinear)), ttest_pval = nonlinear_ttest$p.value,
#Comparison information (moved)
ttest_pval_comp = comp_ttest$p.value,
# Meta info
lang = l, model = m, is_linear = "nonlinear"
)
dll_df = rbind(dll_df_linear, dll_df_nonlinear)
linear_comp_df = rbind(linear_comp_df, dll_df)
}
}
linear_comp_df %>%
filter(ttest_pval_comp < 0.05)
linear_comp_df = data.frame()
for (m in models){
for(l in langs){
target_df_linear = dll_raw_df %>% filter(model == m, lang == l, names == "linear_target")
baseline_df_linear = dll_raw_df %>% filter(model == m, lang == l, names == "linear_baseline")
dll_linear = data.frame(dll = target_df_linear$logliks - baseline_df_linear$logliks) %>%
drop_na() %>%
mutate( m = mean(dll), s=sd(dll)) %>%
#filter(dll < m + s * 3, dll > m - s * 3)
dll_linear = dll_linear$dll
#dll_linear = dll_linear[!is.na(dll_linear)]
linear_ttest = perm.test(dll_linear, num.sim = 1)
target_df_nonlinear = dll_raw_df %>% filter(model == m, lang == l, names == "nonlinear_target")
baseline_df_nonlinear = dll_raw_df %>% filter(model == m, lang == l, names == "nonlinear_baseline")
dll_nonlinear = data.frame(dll = target_df_nonlinear$logliks- baseline_df_nonlinear$logliks) %>%
drop_na() %>%
mutate( m = mean(dll), s=sd(dll)) %>%
#filter(dll < m + s * 3, dll > m - s * 3)
dll_nonlinear = dll_nonlinear$dll
#dll_nonlinear = dll_nonlinear[!is.na(dll_nonlinear)]
nonlinear_ttest = perm.test(dll_nonlinear, num.sim = 1)
comp_ttest = perm.test(dll_nonlinear, dll_linear, num.sim = 1000, paired=T)
dll_df_linear = data.frame(
m = mean(dll_linear), upper = mean(dll_linear) + (1.96 * std.error(dll_linear)), lower = mean(dll_linear) - (1.96 * std.error(dll_linear)),
ttest_pval = linear_ttest$p.value,
#Comparison information (moved)
ttest_pval_comp = comp_ttest$p.value,
# Meta info
lang = l, model = m, is_linear = "linear"
)
dll_df_nonlinear = data.frame(
m = mean(dll_nonlinear), upper = mean(dll_nonlinear) + (1.96 * std.error(dll_nonlinear)), lower = mean(dll_nonlinear) - (1.96 * std.error(dll_nonlinear)), ttest_pval = nonlinear_ttest$p.value,
#Comparison information (moved)
ttest_pval_comp = comp_ttest$p.value,
# Meta info
lang = l, model = m, is_linear = "nonlinear"
)
dll_df = rbind(dll_df_linear, dll_df_nonlinear)
linear_comp_df = rbind(linear_comp_df, dll_df)
}
}
linear_comp_df = data.frame()
for (m in models){
for(l in langs){
target_df_linear = dll_raw_df %>% filter(model == m, lang == l, names == "linear_target")
baseline_df_linear = dll_raw_df %>% filter(model == m, lang == l, names == "linear_baseline")
dll_linear = data.frame(dll = target_df_linear$logliks - baseline_df_linear$logliks) %>%
drop_na() %>%
mutate( m = mean(dll), s=sd(dll)) #%>%
#filter(dll < m + s * 3, dll > m - s * 3)
dll_linear = dll_linear$dll
#dll_linear = dll_linear[!is.na(dll_linear)]
linear_ttest = perm.test(dll_linear, num.sim = 1)
target_df_nonlinear = dll_raw_df %>% filter(model == m, lang == l, names == "nonlinear_target")
baseline_df_nonlinear = dll_raw_df %>% filter(model == m, lang == l, names == "nonlinear_baseline")
dll_nonlinear = data.frame(dll = target_df_nonlinear$logliks- baseline_df_nonlinear$logliks) %>%
drop_na() %>%
mutate( m = mean(dll), s=sd(dll)) #%>%
#filter(dll < m + s * 3, dll > m - s * 3)
dll_nonlinear = dll_nonlinear$dll
#dll_nonlinear = dll_nonlinear[!is.na(dll_nonlinear)]
nonlinear_ttest = perm.test(dll_nonlinear, num.sim = 1)
comp_ttest = perm.test(dll_nonlinear, dll_linear, num.sim = 1000, paired=T)
dll_df_linear = data.frame(
m = mean(dll_linear), upper = mean(dll_linear) + (1.96 * std.error(dll_linear)), lower = mean(dll_linear) - (1.96 * std.error(dll_linear)),
ttest_pval = linear_ttest$p.value,
#Comparison information (moved)
ttest_pval_comp = comp_ttest$p.value,
# Meta info
lang = l, model = m, is_linear = "linear"
)
dll_df_nonlinear = data.frame(
m = mean(dll_nonlinear), upper = mean(dll_nonlinear) + (1.96 * std.error(dll_nonlinear)), lower = mean(dll_nonlinear) - (1.96 * std.error(dll_nonlinear)), ttest_pval = nonlinear_ttest$p.value,
#Comparison information (moved)
ttest_pval_comp = comp_ttest$p.value,
# Meta info
lang = l, model = m, is_linear = "nonlinear"
)
dll_df = rbind(dll_df_linear, dll_df_nonlinear)
linear_comp_df = rbind(linear_comp_df, dll_df)
}
}
linear_comp_df %>%
filter(ttest_pval_comp < 0.05)
linear_comp_df %>%
mutate(lang = factor(lang, levels = c("du", "en", "fi", "ge", "gr", "he", "it", "ko", "ru", "sp", "tr"),
labels = c("Dutch", "English", "Finnish", "German", "Greek", "Hebrew", "Italian", "Korean", "Russian",
"Spanish", "Turkish"))) %>%
mutate(is_linear = if_else(is_linear == "linear", "Linear", "Non-linear")) %>%
#mutate(context = if_else(context == "long", "Long Context", "Short Context")) %>%
ggplot(aes(x = lang, y = m, color = is_linear, shape = is_linear)) +
#geom_hline(yintercept=0, color = "blue") +
geom_point(position = position_dodge(width = 0.5)) +
geom_errorbar(aes(ymin = lower, ymax= upper, width = 0.1), position = position_dodge(width = 0.5)) +
facet_grid(model~., labeller = labeller(model = as_labeller(c(mgpt_lc="mGPT\n(long)", mgpt_sc="mGPT\n(short)", monot_30m="monoT\n(30m)", monot_all="monoT\n(all)")))) +
scale_color_manual(name="Model Type", labels=c("Linear", "Non-linear"), values = c("#6488d6", "#29bc8b")) +
scale_shape_manual(name="Model Type", labels=c("Linear", "Non-linear"), values = c(19, 17)) +
ylab("Delta Log Liklihood (per word)") +
#labs(color = "Model Type") +
#scale_shape(guide = "none") +
theme(
legend.position = "bottom",
axis.title.x = element_blank(),
text = element_text(family = "serif"),
axis.text.x = element_text(angle = 35, hjust = 1)
)
#ggsave("./images/dll_linear_comp.pdf", device ="pdf", width = 4, height = 4)
dll_linear
dll_linear %>%
ggplot() +
geom_histogram()
target_df_linear
target_df_comp = data.frame()
target_df_comp["dll_linear"] = dll_linear$dll
target_df_comp = data.frame() %>%
mutate("dll_linear" = dll_linear$dll,
"dll_nonlinear" =  dll_nonlinear$dll)
target_df_comp = data.frame() %>%
mutate(dll_linear = dll_linear$dll,
dll_nonlinear =  dll_nonlinear$dll)
target_df_comp = data.frame(dll_linear = dll_linear$dll,dll_nonlinear =  dll_nonlinear$dll)
target_df_linear = dll_raw_df %>% filter(model == m, lang == l, names == "linear_target")
baseline_df_linear = dll_raw_df %>% filter(model == m, lang == l, names == "linear_baseline")
dll_linear = data.frame(dll = target_df_linear$logliks - baseline_df_linear$logliks)
target_df_nonlinear = dll_raw_df %>% filter(model == m, lang == l, names == "nonlinear_target")
baseline_df_nonlinear = dll_raw_df %>% filter(model == m, lang == l, names == "nonlinear_baseline")
dll_nonlinear = data.frame(dll = target_df_nonlinear$logliks- baseline_df_nonlinear$logliks)
target_df_comp = data.frame(dll_linear = dll_linear$dll, dll_nonlinear =  dll_nonlinear$dll)
target_df_comp
target_df_comp = data.frame(dll_linear = dll_linear$dll, dll_nonlinear =  dll_nonlinear$dll) %>%
drop_na() %>%
mutate(dll_comp = dll_linear - dll_nonlinear)
mean(target_df_comp$dll_comp)
target_df_comp = data.frame(dll_linear = dll_linear$dll, dll_nonlinear =  dll_nonlinear$dll) %>%
drop_na() %>%
mutate(dll_comp = dll_linear - dll_nonlinear) %>%
mutate(outlier = if_else(abs(dll_comp) > mean(dll_comp) + (3 * sd(dll_comp))))
target_df_comp = data.frame(dll_linear = dll_linear$dll, dll_nonlinear =  dll_nonlinear$dll) %>%
drop_na() %>%
mutate(dll_comp = dll_linear - dll_nonlinear) %>%
mutate(outlier = if_else(abs(dll_comp) > mean(dll_comp) + (3 * sd(dll_comp)), T, F))
target_df_comp
target_df_comp = data.frame(dll_linear = dll_linear$dll, dll_nonlinear =  dll_nonlinear$dll) %>%
drop_na() %>%
mutate(dll_comp = dll_linear - dll_nonlinear) %>%
mutate(outlier = if_else(abs(dll_comp) > mean(dll_comp) + (3 * sd(dll_comp)), T, F)) %>%
filter( ! outlier==T)
target_df_comp
linear_comp_df = data.frame()
for (m in models){
for(l in langs){
target_df_linear = dll_raw_df %>% filter(model == m, lang == l, names == "linear_target")
baseline_df_linear = dll_raw_df %>% filter(model == m, lang == l, names == "linear_baseline")
dll_linear = data.frame(dll = target_df_linear$logliks - baseline_df_linear$logliks)
target_df_nonlinear = dll_raw_df %>% filter(model == m, lang == l, names == "nonlinear_target")
baseline_df_nonlinear = dll_raw_df %>% filter(model == m, lang == l, names == "nonlinear_baseline")
dll_nonlinear = data.frame(dll = target_df_nonlinear$logliks- baseline_df_nonlinear$logliks)
target_df_comp = data.frame(dll_linear = dll_linear$dll, dll_nonlinear =  dll_nonlinear$dll) %>%
drop_na() %>%
mutate(dll_comp = dll_linear - dll_nonlinear) %>%
mutate(outlier = if_else(abs(dll_comp) > mean(dll_comp) + (3 * sd(dll_comp)), T, F)) %>%
filter( ! outlier==T)
comp_ptest = perm.test(target_df_comp$dll_linear, target_df_comp$dll_nonlinear, num.sim = 1000, paried =T)
dll_df_linear = data.frame(
m = mean(target_df_comp$dll_linear), upper = mean(target_df_comp$dll_linear) + (1.96 * std.error(target_df_comp$dll_linear)), lower = mean(target_df_comp$dll_linear) - (1.96 * std.error(target_df_comp$dll_linear)),
#ttest_pval = linear_ttest$p.value,
#Comparison information (moved)
ptest_pval_comp = comp_ptest$p.value,
# Meta info
lang = l, model = m, is_linear = "linear"
)
dll_df_nonlinear = data.frame(
m = mean(target_df_comp$dll_nonlinear), upper = mean(target_df_comp$dll_nonlinear) + (1.96 * std.error(target_df_comp$dll_nonlinear)), lower = mean(target_df_comp$dll_nonlinear) - (1.96 * std.error(target_df_comp$dll_nonlinear)),
#ttest_pval = nonlinear_ttest$p.value,
#Comparison information (moved)
ptest_pval_comp = comp_ptest$p.value,
# Meta info
lang = l, model = m, is_linear = "nonlinear"
)
dll_df = rbind(dll_df_linear, dll_df_nonlinear)
linear_comp_df = rbind(linear_comp_df, dll_df)
}
}
linear_comp_df %>%
filter(ptest_pval_comp < 0.05)
linear_comp_df
linear_comp_df %>%
mutate(lang = factor(lang, levels = c("du", "en", "fi", "ge", "gr", "he", "it", "ko", "ru", "sp", "tr"),
labels = c("Dutch", "English", "Finnish", "German", "Greek", "Hebrew", "Italian", "Korean", "Russian",
"Spanish", "Turkish"))) %>%
mutate(is_linear = if_else(is_linear == "linear", "Linear", "Non-linear")) %>%
#mutate(context = if_else(context == "long", "Long Context", "Short Context")) %>%
ggplot(aes(x = lang, y = m, color = is_linear, shape = is_linear)) +
#geom_hline(yintercept=0, color = "blue") +
geom_point(position = position_dodge(width = 0.5)) +
geom_errorbar(aes(ymin = lower, ymax= upper, width = 0.1), position = position_dodge(width = 0.5)) +
facet_grid(model~., labeller = labeller(model = as_labeller(c(mgpt_lc="mGPT\n(long)", mgpt_sc="mGPT\n(short)", monot_30m="monoT\n(30m)", monot_all="monoT\n(all)")))) +
scale_color_manual(name="Model Type", labels=c("Linear", "Non-linear"), values = c("#6488d6", "#29bc8b")) +
scale_shape_manual(name="Model Type", labels=c("Linear", "Non-linear"), values = c(19, 17)) +
ylab("Delta Log Liklihood (per word)") +
#labs(color = "Model Type") +
#scale_shape(guide = "none") +
theme(
legend.position = "bottom",
axis.title.x = element_blank(),
text = element_text(family = "serif"),
axis.text.x = element_text(angle = 35, hjust = 1)
)
#ggsave("./images/dll_linear_comp.pdf", device ="pdf", width = 4, height = 4)
