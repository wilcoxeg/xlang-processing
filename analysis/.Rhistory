#geom_text(aes(y = -0.0025, label = sig), color = "black", size = 2) +
geom_errorbar(aes(ymin=lower, ymax=upper), width = 0.1, position = position_dodge(width = 0.6)) +
ylab("ΔLogLiklihood (per word)") +
xlab("") +
facet_grid(psychometric~lang) +
scale_x_discrete(labels = c(bquote(w[t-2]), bquote(w[t-1]), bquote(w[t]))) +
scale_color_manual(values=c("#79cec6", "#41a399", "#157c72")) +
#ggtitle("Contribution of Surprisal to ΔLL") +
theme(
legend.position = "none",
axis.title.x = element_blank()
)
ggsave("./images/xlang_dll_surp.png", width = 9.2, height = 4)
options(scipen=999)
dll_xlang_surp_df %>%
mutate(comp = factor(comp, levels = c("2", "1", "0"))) %>%
rename(target = comp) %>%
filter(target != "bl") %>%
mutate(sig = if_else(ttest_pval < 0.05, "p<0.05", "N.S.")) %>%
mutate(psychometric = case_when(psychometric == "firstfix_rt" ~ "First Fixation",
psychometric == "gaze_rt" ~ "Gaze Duration",
psychometric == "total_rt" ~ "Total Fixation")) %>%
ggplot(aes(x = target, y = mean, color = target)) +
geom_hline(yintercept=0, color="orange", linetype="dashed", alpha =0.5) +
geom_point(size = 2, position = position_dodge(width = 0.6)) +
#geom_text(aes(y = -0.0025, label = sig), color = "black", size = 2) +
geom_errorbar(aes(ymin=lower, ymax=upper), width = 0.1, position = position_dodge(width = 0.6)) +
ylab("ΔLogLiklihood (per word)") +
xlab("") +
facet_grid(psychometric~lang) +
scale_x_discrete(labels = c(bquote(w[t-2]), bquote(w[t-1]), bquote(w[t]))) +
scale_color_manual(values=c("#79cec6", "#41a399", "#157c72")) +
#ggtitle("Contribution of Surprisal to ΔLL") +
theme(
legend.position = "none",
axis.title.x = element_blank()
)
ggsave("./images/xlang_dll_surp.png", width = 9.2, height = 4)
options(scipen=999)
dll_xlang_surp_df %>%
mutate(comp = factor(comp, levels = c("2", "1", "0"))) %>%
rename(target = comp) %>%
filter(target != "bl") %>%
mutate(sig = if_else(ttest_pval < 0.05, "p<0.05", "N.S.")) %>%
mutate(psychometric = case_when(psychometric == "firstfix_rt" ~ "First Fixation",
psychometric == "gaze_rt" ~ "Gaze Duration",
psychometric == "total_rt" ~ "Total Fixation")) %>%
ggplot(aes(x = target, y = mean, color = target)) +
geom_hline(yintercept=0, color="blue", linetype="dashed", alpha =0.5) +
geom_point(size = 2, position = position_dodge(width = 0.6)) +
#geom_text(aes(y = -0.0025, label = sig), color = "black", size = 2) +
geom_errorbar(aes(ymin=lower, ymax=upper), width = 0.1, position = position_dodge(width = 0.6)) +
ylab("ΔLogLiklihood (per word)") +
xlab("") +
facet_grid(psychometric~lang) +
scale_x_discrete(labels = c(bquote(w[t-2]), bquote(w[t-1]), bquote(w[t]))) +
#ggtitle("Contribution of Surprisal to ΔLL") +
theme(
legend.position = "none",
axis.title.x = element_blank()
)
ggsave("./images/xlang_dll_surp.png", width = 9.2, height = 4)
options(scipen=999)
dll_xlang_surp_df %>%
mutate(comp = factor(comp, levels = c("2", "1", "0"))) %>%
rename(target = comp) %>%
filter(target != "bl") %>%
mutate(sig = if_else(ttest_pval < 0.05, "p<0.05", "N.S.")) %>%
mutate(psychometric = case_when(psychometric == "firstfix_rt" ~ "First Fixation",
psychometric == "gaze_rt" ~ "Gaze Duration",
psychometric == "total_rt" ~ "Total Fixation")) %>%
ggplot(aes(x = target, y = mean, color = target)) +
geom_hline(yintercept=0, color="blue", linetype="dashed", alpha =0.5) +
geom_point(position = position_dodge(width = 0.6)) +
#geom_text(aes(y = -0.0025, label = sig), color = "black", size = 2) +
geom_errorbar(aes(ymin=lower, ymax=upper), width = 0.1, position = position_dodge(width = 0.6)) +
ylab("ΔLogLiklihood (per word)") +
xlab("") +
facet_grid(psychometric~lang) +
scale_x_discrete(labels = c(bquote(w[t-2]), bquote(w[t-1]), bquote(w[t]))) +
#ggtitle("Contribution of Surprisal to ΔLL") +
theme(
legend.position = "none",
axis.title.x = element_blank()
)
ggsave("./images/xlang_dll_surp.png", width = 9.2, height = 4)
options(scipen=999)
dll_xlang_surp_df %>%
mutate(comp = factor(comp, levels = c("2", "1", "0"))) %>%
rename(target = comp) %>%
filter(target != "bl") %>%
mutate(sig = if_else(ttest_pval < 0.05, "p<0.05", "N.S.")) %>%
mutate(psychometric = case_when(psychometric == "firstfix_rt" ~ "First Fixation",
psychometric == "gaze_rt" ~ "Gaze Duration",
psychometric == "total_rt" ~ "Total Fixation")) %>%
ggplot(aes(x = target, y = mean, color = target)) +
geom_hline(yintercept=0, color="blue", linetype="dashed", alpha =0.5) +
geom_point(position = position_dodge(width = 0.6)) +
#geom_text(aes(y = -0.0025, label = sig), color = "black", size = 2) +
geom_errorbar(aes(ymin=lower, ymax=upper), width = 0.1, position = position_dodge(width = 0.6)) +
ylab("ΔLogLiklihood (per word)") +
xlab("") +
facet_grid(psychometric~lang) +
scale_x_discrete(labels = c(bquote(w[t-2]), bquote(w[t-1]), bquote(w[t]))) +
#ggtitle("Contribution of Surprisal to ΔLL") +
theme(
legend.position = "none",
axis.title.x = element_blank()
)
ggsave("./images/dll_surp.png", width = 9.2, height = 4)
dll_xlang_ent_df %>%
filter(comp == "0" & ttest_est > 0)
dll_xlang_ent_df %>%
mutate(comp = factor(comp, levels = c("2", "1", "0"))) %>%
mutate(mean = -mean, upper = -upper, lower = -lower) %>%
mutate(comp = case_when(comp == "0" ~ "w0", comp == "1" ~ "w-1", comp == "2" ~ "w-2")) %>%
rename(target = comp) %>%
filter(target != "bl") %>%
filter(psychometric == "gaze_rt") %>%
mutate(sig = if_else(ttest_pval < 0.05, "p<0.05", "N.S.")) %>%
mutate(psychometric = case_when(psychometric == "firstfix_rt" ~ "First Fixation",
psychometric == "gaze_rt" ~ "Gaze Duration",
psychometric == "total_rt" ~ "Total Fixation")) %>%
ggplot(aes(x = target, y = mean, color = target)) +
geom_hline(yintercept=0, color="blue", linetype="dashed", alpha =0.5) +
geom_point(position = position_dodge(width = 0.6)) +
#geom_text(aes(y = -0.0025, label = sig), color = "black", size = 2) +
geom_errorbar(aes(ymin=lower, ymax=upper), width = 0.1, position = position_dodge(width = 0.6)) +
ylab("ΔLogLiklihood (per word)") +
#xlab("Language") +
scale_x_discrete(labels = c(bquote(w[t-2]), bquote(w[t-1]), bquote(w[t]))) +
#ggtitle("Replacing Surprisal w/ Entropy") +
facet_grid(psychometric~lang) +
theme(
legend.position = "none",
axis.title.x = element_blank()
)
ggsave("./images/dll_ent_replace_gaze.png", width = 8.5, height = 2)
dll_xlang_ent_df %>%
filter(comp == "0" & ttest_est > 0)
dll_xlang_ent_df %>%
mutate(comp = factor(comp, levels = c("2", "1", "0"))) %>%
mutate(mean = -mean, upper = -upper, lower = -lower) %>%
mutate(comp = case_when(comp == "0" ~ "w0", comp == "1" ~ "w-1", comp == "2" ~ "w-2")) %>%
rename(target = comp) %>%
filter(target != "bl") %>%
#filter(psychometric == "gaze_rt") %>%
mutate(sig = if_else(ttest_pval < 0.05, "p<0.05", "N.S.")) %>%
mutate(psychometric = case_when(psychometric == "firstfix_rt" ~ "First Fixation",
psychometric == "gaze_rt" ~ "Gaze Duration",
psychometric == "total_rt" ~ "Total Fixation")) %>%
ggplot(aes(x = target, y = mean, color = target)) +
geom_hline(yintercept=0, color="blue", linetype="dashed", alpha =0.5) +
geom_point(position = position_dodge(width = 0.6)) +
#geom_text(aes(y = -0.0025, label = sig), color = "black", size = 2) +
geom_errorbar(aes(ymin=lower, ymax=upper), width = 0.1, position = position_dodge(width = 0.6)) +
ylab("ΔLogLiklihood (per word)") +
#xlab("Language") +
scale_x_discrete(labels = c(bquote(w[t-2]), bquote(w[t-1]), bquote(w[t]))) +
#ggtitle("Replacing Surprisal w/ Entropy") +
facet_grid(psychometric~lang) +
theme(
legend.position = "none",
axis.title.x = element_blank()
)
#ggsave("./images/dll_ent_replace_gaze.png", width = 8.5, height = 2)
ggsave("./images/dll_ent_replace_all.png", width = 9.2, height = 4)
dll_xlang_add_df %>%
filter(comp == "0" & ttest_est < 0)
dll_xlang_add_df %>%
mutate(comp = factor(comp, levels = c("2", "1", "0"))) %>%
mutate(mean = -mean, upper = -upper, lower = -lower) %>%
mutate(comp = case_when(comp == "0" ~ "w0", comp == "1" ~ "w-1", comp == "2" ~ "w-2")) %>%
rename(target = comp) %>%
filter(target != "bl") %>%
filter(psychometric == "gaze_rt") %>%
mutate(sig = if_else(ttest_pval < 0.05, "p<0.05", "N.S.")) %>%
mutate(psychometric = case_when(psychometric == "firstfix_rt" ~ "First Fixation",
psychometric == "gaze_rt" ~ "Gaze Duration",
psychometric == "total_rt" ~ "Total Fixation")) %>%
ggplot(aes(x = target, y = mean, color = target)) +
geom_hline(yintercept=0, color="blue", linetype="dashed", alpha =0.5) +
geom_point(position = position_dodge(width = 0.6)) +
geom_errorbar(aes(ymin=lower, ymax=upper), width = 0.1, position = position_dodge(width = 0.6)) +
ylab("ΔLogLiklihood (per word)") +
xlab("Language") +
scale_x_discrete(labels = c(bquote(w[t-2]), bquote(w[t-1]), bquote(w[t]))) +
facet_grid(psychometric~lang) +
theme(
legend.position = "none",
axis.title.x = element_blank()
)
ggsave("./images/dll_ent_add_gaze.png", width = 8.5, height = 2)
#ggsave("./images/dll_ent_add_all.png", width = 9.2, height = 4)
dll_xlang_add_df %>%
filter(comp == "0" & ttest_est < 0)
dll_xlang_add_df %>%
mutate(comp = factor(comp, levels = c("2", "1", "0"))) %>%
mutate(mean = -mean, upper = -upper, lower = -lower) %>%
mutate(comp = case_when(comp == "0" ~ "w0", comp == "1" ~ "w-1", comp == "2" ~ "w-2")) %>%
rename(target = comp) %>%
filter(target != "bl") %>%
#filter(psychometric == "gaze_rt") %>%
mutate(sig = if_else(ttest_pval < 0.05, "p<0.05", "N.S.")) %>%
mutate(psychometric = case_when(psychometric == "firstfix_rt" ~ "First Fixation",
psychometric == "gaze_rt" ~ "Gaze Duration",
psychometric == "total_rt" ~ "Total Fixation")) %>%
ggplot(aes(x = target, y = mean, color = target)) +
geom_hline(yintercept=0, color="blue", linetype="dashed", alpha =0.5) +
geom_point(position = position_dodge(width = 0.6)) +
geom_errorbar(aes(ymin=lower, ymax=upper), width = 0.1, position = position_dodge(width = 0.6)) +
ylab("ΔLogLiklihood (per word)") +
xlab("Language") +
scale_x_discrete(labels = c(bquote(w[t-2]), bquote(w[t-1]), bquote(w[t]))) +
facet_grid(psychometric~lang) +
theme(
legend.position = "none",
axis.title.x = element_blank()
)
#ggsave("./images/dll_ent_add_gaze.png", width = 8.5, height = 2)
ggsave("./images/dll_ent_add_all.png", width = 9.2, height = 4)
fit_gam_inner = function(bootstrap_sample, mean_predictors, is_linear) {
df = bootstrap_sample$data
weights = tabulate(as.integer(bootstrap_sample), nrow(df))
if (is_linear) {
m = gam(psychometric ~ ent + prev_ent + te(freq, len, bs = 'cr') + te(prev_freq, prev_len, bs = 'cr'), data = df, weights = weights)
terms_to_predict = c("ent", "prev_ent")
} else {
m = gam(psychometric ~ s(ent, bs = 'cr', k = 6) + s(prev_ent, bs = 'cr', k = 6) + te(freq, len, bs = 'cr') + te(prev_freq, prev_len, bs = 'cr'), data = df, weights = weights)
terms_to_predict = c("s(ent)", "s(prev_ent)")
}
newdata = data.frame(ent=seq(0,20,by=0.1),
prev_ent=mean_predictors$ent,
freq=mean_predictors$freq, prev_freq=mean_predictors$freq,
len=mean_predictors$freq, prev_len=mean_predictors$freq)
# Returns a matrix N_samples * N_terms.
per_term_predictions = predict(m, newdata=newdata, terms=terms_to_predict, type="terms")
# Additive model -- sum across predictor response contributions (matrix columns).
predictions = rowSums(per_term_predictions)
return(newdata %>% mutate(y=predictions))
}
fit_gam = function(df, mean_predictors, is_linear, alpha=0.05) {
# Bootstrap-resample data
boot_models = df %>% bootstraps(times=10) %>%
# Fit a GAM and get predictions for each sample
mutate(smoothed=map(splits, fit_gam_inner, mean_predictors=mean_predictors, is_linear = is_linear))
# Extract mean and 5% and 95% percentile y-values for each surprisal value
result = boot_models %>%
unnest(smoothed) %>%
dplyr::select(ent, y) %>%
group_by(ent) %>%
summarise(y_lower=quantile(y, alpha / 2),
y_upper=quantile(y, 1 - alpha / 2),
y=mean(y)) %>%
ungroup()
return (result)
}
xlang_nonlinear_smooths_long_ent = data.frame()
for (lang in langs) {
print(paste0("Fitting model for ", lang))
merged_df = read.csv(paste0("./cleaned_data/", lang, "_clean_data.csv")) %>% filter(context == "long")
mean_predictors = merged_df %>% summarise(ent = mean(ent), len = mean(len), freq = mean(freq))
smooths = merged_df %>% fit_gam(., mean_predictors, is_linear=F)
#Fix 0 surprisal = 0 ms
gam_smooths = smooths %>% mutate(delta = 0 - y[1], y=y + delta, y_lower= y_lower + delta, y_upper=y_upper + delta)
xlang_nonlinear_smooths_long_ent = rbind(xlang_nonlinear_smooths_long_ent, gam_smooths %>% mutate(lang = lang, context = "long", linear = "non-linear"))
}
fit_gam_inner = function(bootstrap_sample, mean_predictors, is_linear) {
df = bootstrap_sample$data
weights = tabulate(as.integer(bootstrap_sample), nrow(df))
if (is_linear) {
m = gam(psychometric ~ ent + prev_ent + te(freq, len, bs = 'cr') + te(prev_freq, prev_len, bs = 'cr'), data = df, weights = weights)
terms_to_predict = c("ent", "prev_ent")
} else {
m = gam(psychometric ~ s(ent, bs = 'cr', k = 6) + s(prev_ent, bs = 'cr', k = 6) + te(freq, len, bs = 'cr') + te(prev_freq, prev_len, bs = 'cr'), data = df, weights = weights)
terms_to_predict = c("s(ent)", "s(prev_ent)")
}
newdata = data.frame(ent=seq(0,20,by=0.1),
prev_ent=mean_predictors$ent,
freq=mean_predictors$freq, prev_freq=mean_predictors$freq,
len=mean_predictors$freq, prev_len=mean_predictors$freq)
# Returns a matrix N_samples * N_terms.
per_term_predictions = predict(m, newdata=newdata, terms=terms_to_predict, type="terms")
# Additive model -- sum across predictor response contributions (matrix columns).
predictions = rowSums(per_term_predictions)
return(newdata %>% mutate(y=predictions))
}
fit_gam = function(df, mean_predictors, is_linear, alpha=0.05) {
# Bootstrap-resample data
boot_models = df %>% bootstraps(times=10) %>%
# Fit a GAM and get predictions for each sample
mutate(smoothed=map(splits, fit_gam_inner, mean_predictors=mean_predictors, is_linear = is_linear))
# Extract mean and 5% and 95% percentile y-values for each surprisal value
result = boot_models %>%
unnest(smoothed) %>%
dplyr::select(ent, y) %>%
group_by(ent) %>%
summarise(y_lower=quantile(y, alpha / 2),
y_upper=quantile(y, 1 - alpha / 2),
y=mean(y)) %>%
ungroup()
return (result)
}
xlang_nonlinear_smooths_long_ent = data.frame()
for (lang in langs) {
print(paste0("Fitting model for ", lang))
merged_df = read.csv(paste0("./cleaned_data/", lang, "_clean_data.csv")) %>% filter(context == "long")
mean_predictors = merged_df %>% summarise(ent = mean(ent), len = mean(len), freq = mean(freq))
smooths = merged_df %>% fit_gam(., mean_predictors, is_linear=F)
#Fix 0 surprisal = 0 ms
gam_smooths = smooths %>% mutate(delta = 0 - y[1], y=y + delta, y_lower= y_lower + delta, y_upper=y_upper + delta)
xlang_nonlinear_smooths_long_ent = rbind(xlang_nonlinear_smooths_long_ent, gam_smooths %>% mutate(lang = lang, context = "long", linear = "non-linear"))
}
xlang_nonlinear_smooths_long_ent = data.frame()
for (lang in langs) {
print(paste0("Fitting model for ", lang))
merged_df = read.csv(paste0("./cleaned_data/", lang, "_clean_data.csv")) %>% filter(context == "long") %>% rename(psychometric = gaze_rt)
mean_predictors = merged_df %>% summarise(ent = mean(ent), len = mean(len), freq = mean(freq))
smooths = merged_df %>% fit_gam(., mean_predictors, is_linear=F)
#Fix 0 surprisal = 0 ms
gam_smooths = smooths %>% mutate(delta = 0 - y[1], y=y + delta, y_lower= y_lower + delta, y_upper=y_upper + delta)
xlang_nonlinear_smooths_long_ent = rbind(xlang_nonlinear_smooths_long_ent, gam_smooths %>% mutate(lang = lang, context = "long", linear = "non-linear"))
}
# Surprisal curves for long contexts
ggplot() +
annotate("rect", xmin=0, xmax=20, ymin=-18,ymax=-13, fill="blue", alpha=0.05) +
geom_line(data = density_data_short, aes(x=x, y=y*50 - 18), color="grey") +
#geom_line(data = xlang_linear_smooths_short, aes(x=surp, y=y, color = linear), size=0.5) +
geom_line(data = xlang_nonlinear_smooths_long_ent, aes(x=ent, y=y, color = linear), size=0.5) +
geom_ribbon(data = xlang_nonlinear_smooths_long_ent, aes(x=ent, ymin=y_lower, ymax=y_upper, fill = linear), alpha=0.3, size=0.5) +
#geom_ribbon(data = xlang_linear_smooths_short, aes(x=surp, ymin=y_lower, ymax=y_upper, fill = linear), alpha=0.3, size=0.5) +
scale_x_continuous(labels=c(0, 10, 20), breaks=c(0, 10, 20), minor_breaks = NULL) +
facet_wrap(~lang, nrow = 1) +
ylab("Slowdown due to surprisal (ms)") +
xlab("Surprisal of Word") +
scale_color_manual(values = c("#b7b7b7", "#29bc8b")) +
scale_fill_manual(values = c("#b7b7b7", "#29bc8b")) +
scale_linetype_manual(values = c("a", "b")) +
#ggtitle("Effect of Surprisal on Reading Time across Languages \n Long Context Window")
theme(
legend.position = "none"
)
get_d_points = function(df) {
x = density(df$ent)$x
y = density(df$ent)$y
return(data.frame(x, y))
}
density_data_short = data.frame()
for(lang in langs) {
merged_df = read.csv(paste0("./cleaned_data/", lang, "_clean_data.csv")) %>% filter(context == "short")
density_data = merged_df %>%
do({get_d_points(.)}) %>%
filter(x>0, x<20)
density_data_short = rbind(density_data_short, density_data %>% mutate(lang = lang, context = "short"))
}
density_data_long = data.frame()
for(lang in langs) {
merged_df = read.csv(paste0("./cleaned_data/", lang, "_clean_data.csv")) %>% filter(context == "long")
density_data = merged_df %>%
do({get_d_points(.)}) %>%
filter(x>0, x<20)
density_data_long = rbind(density_data_long, density_data %>% mutate(lang = lang, context = "long"))
}
# Surprisal curves for long contexts
ggplot() +
annotate("rect", xmin=0, xmax=20, ymin=-18,ymax=-13, fill="blue", alpha=0.05) +
geom_line(data = density_data_short, aes(x=x, y=y*50 - 18), color="grey") +
#geom_line(data = xlang_linear_smooths_short, aes(x=surp, y=y, color = linear), size=0.5) +
geom_line(data = xlang_nonlinear_smooths_long_ent, aes(x=ent, y=y, color = linear), size=0.5) +
geom_ribbon(data = xlang_nonlinear_smooths_long_ent, aes(x=ent, ymin=y_lower, ymax=y_upper, fill = linear), alpha=0.3, size=0.5) +
#geom_ribbon(data = xlang_linear_smooths_short, aes(x=surp, ymin=y_lower, ymax=y_upper, fill = linear), alpha=0.3, size=0.5) +
scale_x_continuous(labels=c(0, 10, 20), breaks=c(0, 10, 20), minor_breaks = NULL) +
facet_wrap(~lang, nrow = 1) +
ylab("Slowdown due to surprisal (ms)") +
xlab("Surprisal of Word") +
scale_color_manual(values = c("#b7b7b7", "#29bc8b")) +
scale_fill_manual(values = c("#b7b7b7", "#29bc8b")) +
scale_linetype_manual(values = c("a", "b")) +
#ggtitle("Effect of Surprisal on Reading Time across Languages \n Long Context Window")
theme(
legend.position = "none"
)
#ggsave("./images/ent_mgpt_short.png", height = 2.4, width = 8)
xlang_linear_smooths_long_ent = data.frame()
for (lang in langs) {
print(paste0("Fitting model for ", lang))
merged_df = read.csv(paste0("./cleaned_data/", lang, "_clean_data.csv")) %>% filter(context == "long") %>% rename(psychometric = gaze_rt)
mean_predictors = merged_df %>% summarise(ent = mean(ent), len = mean(len), freq = mean(freq))
smooths = merged_df %>% fit_gam(., mean_predictors, is_linear=T)
#Fix 0 surprisal = 0 ms
gam_smooths = smooths %>% mutate(delta = 0 - y[1], y=y + delta, y_lower= y_lower + delta, y_upper=y_upper + delta)
xlang_linear_smooths_long_ent = rbind(xlang_linear_smooths_long_ent, gam_smooths %>% mutate(lang = lang, context = "long", linear = "non-linear"))
}
# Surprisal curves for long contexts
ggplot() +
annotate("rect", xmin=0, xmax=20, ymin=-18,ymax=-13, fill="blue", alpha=0.05) +
geom_line(data = density_data_short, aes(x=x, y=y*50 - 18), color="grey") +
geom_line(data = xlang_linear_smooths_long_ent, aes(x=surp, y=y, color = linear), size=0.5) +
geom_line(data = xlang_nonlinear_smooths_long_ent, aes(x=ent, y=y, color = linear), size=0.5) +
geom_ribbon(data = xlang_nonlinear_smooths_long_ent, aes(x=ent, ymin=y_lower, ymax=y_upper, fill = linear), alpha=0.3, size=0.5) +
geom_ribbon(data = xlang_linear_smooths_long_ent, aes(x=surp, ymin=y_lower, ymax=y_upper, fill = linear), alpha=0.3, size=0.5) +
scale_x_continuous(labels=c(0, 10, 20), breaks=c(0, 10, 20), minor_breaks = NULL) +
facet_wrap(~lang, nrow = 1) +
ylab("Slowdown due to Entropy (ms)") +
xlab("Entropy of Word") +
scale_color_manual(values = c("#b7b7b7", "#29bc8b")) +
scale_fill_manual(values = c("#b7b7b7", "#29bc8b")) +
scale_linetype_manual(values = c("a", "b")) +
#ggtitle("Effect of Surprisal on Reading Time across Languages \n Long Context Window")
theme(
legend.position = "none"
)
# Surprisal curves for long contexts
ggplot() +
annotate("rect", xmin=0, xmax=20, ymin=-18,ymax=-13, fill="blue", alpha=0.05) +
geom_line(data = density_data_short, aes(x=x, y=y*50 - 18), color="grey") +
geom_line(data = xlang_linear_smooths_long_ent, aes(x=ent, y=y, color = linear), size=0.5) +
geom_line(data = xlang_nonlinear_smooths_long_ent, aes(x=ent, y=y, color = linear), size=0.5) +
geom_ribbon(data = xlang_nonlinear_smooths_long_ent, aes(x=ent, ymin=y_lower, ymax=y_upper, fill = linear), alpha=0.3, size=0.5) +
geom_ribbon(data = xlang_linear_smooths_long_ent, aes(x=ent, ymin=y_lower, ymax=y_upper, fill = linear), alpha=0.3, size=0.5) +
scale_x_continuous(labels=c(0, 10, 20), breaks=c(0, 10, 20), minor_breaks = NULL) +
facet_wrap(~lang, nrow = 1) +
ylab("Slowdown due to Entropy (ms)") +
xlab("Entropy of Word") +
scale_color_manual(values = c("#b7b7b7", "#29bc8b")) +
scale_fill_manual(values = c("#b7b7b7", "#29bc8b")) +
scale_linetype_manual(values = c("a", "b")) +
#ggtitle("Effect of Surprisal on Reading Time across Languages \n Long Context Window")
theme(
legend.position = "none"
)
ggsave("./images/link_ent_long.png", height = 2.4, width = 8)
xlang_linear_smooths_long_ent = data.frame()
for (lang in langs) {
print(paste0("Fitting model for ", lang))
merged_df = read.csv(paste0("./cleaned_data/", lang, "_clean_data.csv")) %>% filter(context == "long") %>% rename(psychometric = gaze_rt)
mean_predictors = merged_df %>% summarise(ent = mean(ent), len = mean(len), freq = mean(freq))
smooths = merged_df %>% fit_gam(., mean_predictors, is_linear=T)
#Fix 0 surprisal = 0 ms
gam_smooths = smooths %>% mutate(delta = 0 - y[1], y=y + delta, y_lower= y_lower + delta, y_upper=y_upper + delta)
xlang_linear_smooths_long_ent = rbind(xlang_linear_smooths_long_ent, gam_smooths %>% mutate(lang = lang, context = "long", linear = "linear"))
}
xlang_linear_smooths_long_ent = data.frame()
for (lang in langs) {
print(paste0("Fitting model for ", lang))
merged_df = read.csv(paste0("./cleaned_data/", lang, "_clean_data.csv")) %>% filter(context == "long") %>% rename(psychometric = gaze_rt)
mean_predictors = merged_df %>% summarise(ent = mean(ent), len = mean(len), freq = mean(freq))
smooths = merged_df %>% fit_gam(., mean_predictors, is_linear=T)
#Fix 0 surprisal = 0 ms
gam_smooths = smooths %>% mutate(delta = 0 - y[1], y=y + delta, y_lower= y_lower + delta, y_upper=y_upper + delta)
xlang_linear_smooths_long_ent = rbind(xlang_linear_smooths_long_ent, gam_smooths %>% mutate(lang = lang, context = "long", linear = "linear"))
}
# Surprisal curves for long contexts
ggplot() +
annotate("rect", xmin=0, xmax=20, ymin=-18,ymax=-13, fill="blue", alpha=0.05) +
geom_line(data = density_data_short, aes(x=x, y=y*50 - 18), color="grey") +
geom_line(data = xlang_linear_smooths_long_ent, aes(x=ent, y=y, color = linear), size=0.5) +
geom_line(data = xlang_nonlinear_smooths_long_ent, aes(x=ent, y=y, color = linear), size=0.5) +
geom_ribbon(data = xlang_nonlinear_smooths_long_ent, aes(x=ent, ymin=y_lower, ymax=y_upper, fill = linear), alpha=0.3, size=0.5) +
geom_ribbon(data = xlang_linear_smooths_long_ent, aes(x=ent, ymin=y_lower, ymax=y_upper, fill = linear), alpha=0.3, size=0.5) +
scale_x_continuous(labels=c(0, 10, 20), breaks=c(0, 10, 20), minor_breaks = NULL) +
facet_wrap(~lang, nrow = 1) +
ylab("Slowdown due to Entropy (ms)") +
xlab("Entropy of Word") +
scale_color_manual(values = c("#b7b7b7", "#29bc8b")) +
scale_fill_manual(values = c("#b7b7b7", "#29bc8b")) +
scale_linetype_manual(values = c("a", "b")) +
#ggtitle("Effect of Surprisal on Reading Time across Languages \n Long Context Window")
theme(
legend.position = "none"
)
ggsave("./images/link_ent_long.png", height = 2.4, width = 8)
# Surprisal curves for long contexts
ggplot() +
annotate("rect", xmin=0, xmax=20, ymin=-18,ymax=-13, fill="blue", alpha=0.05) +
geom_line(data = density_data_short, aes(x=x, y=y*70 - 18), color="grey") +
geom_line(data = xlang_linear_smooths_long_ent, aes(x=ent, y=y, color = linear), size=0.5) +
geom_line(data = xlang_nonlinear_smooths_long_ent, aes(x=ent, y=y, color = linear), size=0.5) +
geom_ribbon(data = xlang_nonlinear_smooths_long_ent, aes(x=ent, ymin=y_lower, ymax=y_upper, fill = linear), alpha=0.3, size=0.5) +
geom_ribbon(data = xlang_linear_smooths_long_ent, aes(x=ent, ymin=y_lower, ymax=y_upper, fill = linear), alpha=0.3, size=0.5) +
scale_x_continuous(labels=c(0, 10, 20), breaks=c(0, 10, 20), minor_breaks = NULL) +
facet_wrap(~lang, nrow = 1) +
ylab("Slowdown due to Entropy (ms)") +
xlab("Entropy of Word") +
scale_color_manual(values = c("#b7b7b7", "#29bc8b")) +
scale_fill_manual(values = c("#b7b7b7", "#29bc8b")) +
scale_linetype_manual(values = c("a", "b")) +
#ggtitle("Effect of Surprisal on Reading Time across Languages \n Long Context Window")
theme(
legend.position = "none"
)
ggsave("./images/link_ent_long.png", height = 2.4, width = 8)
# Surprisal curves for long contexts
ggplot() +
annotate("rect", xmin=0, xmax=20, ymin=-18,ymax=-10, fill="blue", alpha=0.05) +
geom_line(data = density_data_short, aes(x=x, y=y*50 - 18), color="grey") +
geom_line(data = xlang_linear_smooths_long_ent, aes(x=ent, y=y, color = linear), size=0.5) +
geom_line(data = xlang_nonlinear_smooths_long_ent, aes(x=ent, y=y, color = linear), size=0.5) +
geom_ribbon(data = xlang_nonlinear_smooths_long_ent, aes(x=ent, ymin=y_lower, ymax=y_upper, fill = linear), alpha=0.3, size=0.5) +
geom_ribbon(data = xlang_linear_smooths_long_ent, aes(x=ent, ymin=y_lower, ymax=y_upper, fill = linear), alpha=0.3, size=0.5) +
scale_x_continuous(labels=c(0, 10, 20), breaks=c(0, 10, 20), minor_breaks = NULL) +
facet_wrap(~lang, nrow = 1) +
ylab("Slowdown due to Entropy (ms)") +
xlab("Entropy of Word") +
scale_color_manual(values = c("#b7b7b7", "#29bc8b")) +
scale_fill_manual(values = c("#b7b7b7", "#29bc8b")) +
scale_linetype_manual(values = c("a", "b")) +
#ggtitle("Effect of Surprisal on Reading Time across Languages \n Long Context Window")
theme(
legend.position = "none"
)
ggsave("./images/link_ent_long.png", height = 2.4, width = 8)
