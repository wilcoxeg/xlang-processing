coeff_plotting_df %>%
filter(name == "surp") %>%
group_by(model) %>%
summarise(m = mean(m)) %>%
ungroup()
coeff_plotting_df %>%
ggplot(aes(x = position, y = m, fill = model, color=model)) +
geom_bar(position = position_dodge(width = 0.9)) +
geom_errorbar(aes(ymin=lower, ymax=upper), position = position_dodge(width = 0.9), width = 0.1) +
geom_hline(yintercept = 0, color = "blue", linetype = "dashed") +
ylab("Coefficient Estimate") +
facet_grid(predictor~lang, scales = "free_y") +
scale_x_discrete(labels = c(bquote(w[t]), bquote(w[t-1]), bquote(w[t-2]))) +
#scale_color_manual(values = c("#225ea8", "#41b6c4", "#a1dab4")) +
theme(
axis.title.x = element_blank(),
legend.position = "bottom"
)
coeff_plotting_df %>%
ggplot(aes(x = position, y = m, fill = model, color=model)) +
geom_bar(stat="identity", position = position_dodge(width = 0.9)) +
geom_errorbar(aes(ymin=lower, ymax=upper), position = position_dodge(width = 0.9), width = 0.1) +
geom_hline(yintercept = 0, color = "blue", linetype = "dashed") +
ylab("Coefficient Estimate") +
facet_grid(predictor~lang, scales = "free_y") +
scale_x_discrete(labels = c(bquote(w[t]), bquote(w[t-1]), bquote(w[t-2]))) +
#scale_color_manual(values = c("#225ea8", "#41b6c4", "#a1dab4")) +
theme(
axis.title.x = element_blank(),
legend.position = "bottom"
)
#ggsave("./images/coeffs.pdf", width = 10, height = 5)
coeff_plotting_df %>%
ggplot(aes(x = position, y = m, fill = model, color=model)) +
geom_bar(stat="identity", position = position_dodge(width = 0.9)) +
geom_errorbar(aes(ymin=lower, ymax=upper), position = position_dodge(width = 0.9), width = 0.1) +
geom_hline(yintercept = 0, color = "blue", linetype = "dashed") +
ylab("Coefficient Estimate") +
facet_grid(predictor~lang, scales = "free_y") +
scale_x_discrete(labels = c(bquote(w[t]), bquote(w[t-1]), bquote(w[t-2]))) +
#scale_color_manual(values = c("#225ea8", "#41b6c4", "#a1dab4")) +
theme(
axis.title.x = element_blank(),
legend.position = "bottom"
)
ggsave("./images/coeffs.pdf", width = 10, height = 5)
coeff_plotting_df %>%
ggplot(aes(x = position, y = m, fill = model)) +
geom_bar(stat="identity", position = position_dodge(width = 0.9)) +
geom_errorbar(aes(ymin=lower, ymax=upper), position = position_dodge(width = 0.9), width = 0.1) +
geom_hline(yintercept = 0, color = "blue", linetype = "dashed") +
ylab("Coefficient Estimate") +
facet_grid(predictor~lang, scales = "free_y") +
scale_x_discrete(labels = c(bquote(w[t]), bquote(w[t-1]), bquote(w[t-2]))) +
#scale_color_manual(values = c("#225ea8", "#41b6c4", "#a1dab4")) +
theme(
axis.title.x = element_blank(),
legend.position = "bottom"
)
ggsave("./images/coeffs.pdf", width = 10, height = 5)
coeff_plotting_df %>%
ggplot(aes(x = position, y = m, fill = model)) +
geom_bar(stat="identity", position = position_dodge(width = 0.9)) +
geom_errorbar(aes(ymin=lower, ymax=upper), position = position_dodge(width = 0.9), width = 0.1) +
geom_hline(yintercept = 0, color = "black") +
ylab("Coefficient Estimate") +
facet_grid(predictor~lang, scales = "free_y") +
scale_x_discrete(labels = c(bquote(w[t]), bquote(w[t-1]), bquote(w[t-2]))) +
#scale_color_manual(values = c("#225ea8", "#41b6c4", "#a1dab4")) +
theme(
axis.title.x = element_blank(),
legend.position = "bottom"
)
ggsave("./images/coeffs.pdf", width = 10, height = 5)
coeff_plotting_df %>%
ggplot(aes(x = position, y = m, fill = model)) +
geom_bar(stat="identity", position = position_dodge(width = 0.9)) +
geom_errorbar(aes(ymin=lower, ymax=upper), position = position_dodge(width = 0.9), width = 0.1) +
geom_hline(yintercept = 0, color = "black") +
ylab("Coefficient Estimate") +
facet_grid(lang~predictor, scales = "free_y") +
scale_x_discrete(labels = c(bquote(w[t]), bquote(w[t-1]), bquote(w[t-2]))) +
#scale_color_manual(values = c("#225ea8", "#41b6c4", "#a1dab4")) +
theme(
axis.title.x = element_blank(),
legend.position = "bottom"
)
ggsave("./images/coeffs.pdf", width = 8, height = 6)
coeff_plotting_df %>%
ggplot(aes(x = position, y = m, fill = model)) +
geom_bar(stat="identity", position = position_dodge(width = 0.9)) +
geom_errorbar(aes(ymin=lower, ymax=upper), position = position_dodge(width = 0.9), width = 0.1) +
geom_hline(yintercept = 0, color = "black") +
ylab("Coefficient Estimate") +
facet_grid(predictor~lang, scales = "free_y") +
scale_x_discrete(labels = c(bquote(w[t]), bquote(w[t-1]), bquote(w[t-2]))) +
#scale_color_manual(values = c("#225ea8", "#41b6c4", "#a1dab4")) +
theme(
axis.title.x = element_blank(),
legend.position = "bottom"
)
ggsave("./images/coeffs.pdf", width = 10, height = 5)
model_cross_val = function(form, df, d_var, num_folds=10){
folds <- cut(seq(1,nrow(df)),breaks=num_folds,labels=FALSE)
estimates <- c()
models <- c()
for(i in 1:num_folds){
testIndexes = which(folds==i,arr.ind=TRUE)
testData = df[testIndexes,]
trainData = df[-testIndexes,]
if(grepl("bs = 'cr'", form, fixed=TRUE)) {
model = gam(as.formula(form), data = trainData)
} else {
model = lm(as.formula(form), data = trainData)
}
stdev = sigma(model)
densities <- log(dnorm(testData[[d_var]],
mean=predict(model, newdata=testData),
sd=stdev))
estimates <- c(estimates, densities)
}
return(estimates)
}
regression_names = c("linear_baseline", "linear_target", "nonlinear_baseline", "nonlinear_target")
dll_raw_df = data.frame()
for (lang in langs) {
print(paste0("Fitting model for ", lang))
for(m in models){
df = read.csv(paste0("../data/merged_data/", lang, ".csv"))%>%
filter(model == m)
regression_forms = c(
# Linear Models
#paste0(psychometric, " ~ freq + prev_freq + len + prev_len"),
paste0(psychometric, " ~ te(freq, len, bs = 'cr') + te(prev_freq, prev_len, bs = 'cr')"),
paste0(psychometric, "~ surp + prev_surp + te(freq, len, bs = 'cr') + te(prev_freq, prev_len, bs = 'cr') "),
# Non-Linear Models
paste0(psychometric, " ~ te(freq, len, bs = 'cr') + te(prev_freq, prev_len, bs = 'cr')"),
paste0(psychometric, "~ s(surp, bs = 'cr', k = 20) + s(prev_surp, bs = 'cr', k = 20) + te(freq, len, bs = 'cr') + te(prev_freq, prev_len, bs = 'cr') ")
)
loglik_df = data.frame(names=regression_names, forms=regression_forms) %>%
mutate(logliks = map(regression_forms, model_cross_val, df=df, d_var=psychometric )) %>%
dplyr::select(-forms)
loglik_df = loglik_df %>% unnest(cols = c(logliks)) %>% mutate(lang = lang, psychometric = psychometric, model = m)
dll_raw_df = rbind(dll_raw_df, loglik_df)
}
}
l = "ge"
linear_comp_df = data.frame()
for (m in models){
for(l in langs){
target_df_linear = dll_raw_df %>% filter(model == m, lang == l, names == "linear_target")
baseline_df_linear = dll_raw_df %>% filter(model == m, lang == l, names == "linear_baseline")
dll_linear = target_df_linear$logliks - baseline_df_linear$logliks
dll_linear = dll_linear[!is.na(dll_linear)]
linear_ttest = perm.test(dll_linear, num.sim = 500)
target_df_nonlinear = dll_raw_df %>% filter(model == m, lang == l, names == "nonlinear_target")
baseline_df_nonlinear = dll_raw_df %>% filter(model == m, lang == l, names == "nonlinear_baseline")
dll_nonlinear = target_df_nonlinear$logliks- baseline_df_nonlinear$logliks
dll_nonlinear = dll_nonlinear[!is.na(dll_nonlinear)]
nonlinear_ttest = perm.test(dll_nonlinear, num.sim = 500)
comp_ttest = perm.test(dll_nonlinear, dll_linear, num.sim = 500)
dll_df_linear = data.frame(
m = mean(dll_linear), upper = mean(dll_linear) + (1.96 * std.error(dll_linear)), lower = mean(dll_linear) - (1.96 * std.error(dll_linear)),
ttest_pval = linear_ttest$p.value,
#Comparison information
ttest_pval_comp = comp_ttest$p.value,
# Meta info
lang = l, model = m, is_linear = "linear"
)
dll_df_nonlinear = data.frame(
m = mean(dll_nonlinear), upper = mean(dll_nonlinear) + (1.96 * std.error(dll_nonlinear)), lower = mean(dll_nonlinear) - (1.96 * std.error(dll_nonlinear)), ttest_pval = nonlinear_ttest$p.value,
#Comparison information
ttest_pval_comp = comp_ttest$p.value,
# Meta info
lang = l, model = m, is_linear = "nonlinear"
)
dll_df = rbind(dll_df_linear, dll_df_nonlinear)
linear_comp_df = rbind(linear_comp_df, dll_df)
}
}
linear_comp_df %>%
#filter(lang != "ge") %>%
mutate(is_linear = if_else(is_linear == "linear", "Linear", "Non-linear")) %>%
#mutate(context = if_else(context == "long", "Long Context", "Short Context")) %>%
ggplot(aes(x = lang, y = m, color = is_linear, shape = is_linear)) +
#geom_hline(yintercept=0, color = "blue") +
geom_point(position = position_dodge(width = 0.5)) +
geom_errorbar(aes(ymin = lower, ymax= upper, width = 0.1), position = position_dodge(width = 0.5)) +
facet_grid(model~., labeller = labeller(model = as_labeller(c(mgpt_lc="mGPT\n(long)", mgpt_sc="mGPT\n(short)", monot_30m="monoT\n(30m)", monot_all="monoT\n(all)")))) +
scale_color_manual(values = c("#6488d6", "#29bc8b")) +
ylab("Delta Log Liklihood (per word)") +
labs(color = "Model Type") +
scale_shape(guide = "none") +
theme(
legend.position = "bottom",
axis.title.x = element_blank()
)
#ggsave("./images/dll_linear_comp.pdf", device ="pdf", width = 4, height = 4)
dll_raw_df %>%
filter(lang == "ge")
ge %>%
filter(lang == "ge") %>%
ggplot(aes(x=logliks, color = names)) +
geom_density()
dll_raw_df
dll_raw_df %>%
filter(lang == "ge") %>%
ggplot(aes(x=logliks, color = names)) +
geom_density()
dll_raw_df %>%
filter(lang == "du") %>%
ggplot(aes(x=logliks, color = names)) +
geom_density()
dll_raw_df
linear_comp_df = data.frame()
for (m in models){
for(l in langs){
target_df_linear = dll_raw_df %>% filter(model == m, lang == l, names == "linear_target")
baseline_df_linear = dll_raw_df %>% filter(model == m, lang == l, names == "linear_baseline")
dll_linear = target_df_linear$logliks - baseline_df_linear$logliks
dll_linear = dll_linear[!is.na(dll_linear)]
dll_linear = dll_linear[dll_linear > -50]
linear_ttest = perm.test(dll_linear, num.sim = 500)
target_df_nonlinear = dll_raw_df %>% filter(model == m, lang == l, names == "nonlinear_target")
baseline_df_nonlinear = dll_raw_df %>% filter(model == m, lang == l, names == "nonlinear_baseline")
dll_nonlinear = target_df_nonlinear$logliks- baseline_df_nonlinear$logliks
dll_nonlinear = dll_nonlinear[!is.na(dll_nonlinear)]
dll_nonlinear = dll_nonlinear[dll_nonlinear > -50]
nonlinear_ttest = perm.test(dll_nonlinear, num.sim = 500)
comp_ttest = perm.test(dll_nonlinear, dll_linear, num.sim = 500)
dll_df_linear = data.frame(
m = mean(dll_linear), upper = mean(dll_linear) + (1.96 * std.error(dll_linear)), lower = mean(dll_linear) - (1.96 * std.error(dll_linear)),
ttest_pval = linear_ttest$p.value,
#Comparison information
ttest_pval_comp = comp_ttest$p.value,
# Meta info
lang = l, model = m, is_linear = "linear"
)
dll_df_nonlinear = data.frame(
m = mean(dll_nonlinear), upper = mean(dll_nonlinear) + (1.96 * std.error(dll_nonlinear)), lower = mean(dll_nonlinear) - (1.96 * std.error(dll_nonlinear)), ttest_pval = nonlinear_ttest$p.value,
#Comparison information
ttest_pval_comp = comp_ttest$p.value,
# Meta info
lang = l, model = m, is_linear = "nonlinear"
)
dll_df = rbind(dll_df_linear, dll_df_nonlinear)
linear_comp_df = rbind(linear_comp_df, dll_df)
}
}
linear_comp_df %>%
mutate(is_linear = if_else(is_linear == "linear", "Linear", "Non-linear")) %>%
#mutate(context = if_else(context == "long", "Long Context", "Short Context")) %>%
ggplot(aes(x = lang, y = m, color = is_linear, shape = is_linear)) +
#geom_hline(yintercept=0, color = "blue") +
geom_point(position = position_dodge(width = 0.5)) +
geom_errorbar(aes(ymin = lower, ymax= upper, width = 0.1), position = position_dodge(width = 0.5)) +
facet_grid(model~., labeller = labeller(model = as_labeller(c(mgpt_lc="mGPT\n(long)", mgpt_sc="mGPT\n(short)", monot_30m="monoT\n(30m)", monot_all="monoT\n(all)")))) +
scale_color_manual(values = c("#6488d6", "#29bc8b")) +
ylab("Delta Log Liklihood (per word)") +
labs(color = "Model Type") +
scale_shape(guide = "none") +
theme(
legend.position = "bottom",
axis.title.x = element_blank()
)
#ggsave("./images/dll_linear_comp.pdf", device ="pdf", width = 4, height = 4)
linear_comp_df = data.frame()
for (m in models){
for(l in langs){
target_df_linear = dll_raw_df %>% filter(model == m, lang == l, names == "linear_target")
baseline_df_linear = dll_raw_df %>% filter(model == m, lang == l, names == "linear_baseline")
dll_linear = target_df_linear$logliks - baseline_df_linear$logliks
dll_linear = dll_linear[!is.na(dll_linear)]
dll_linear = dll_linear[dll_linear > -10]
linear_ttest = perm.test(dll_linear, num.sim = 500)
target_df_nonlinear = dll_raw_df %>% filter(model == m, lang == l, names == "nonlinear_target")
baseline_df_nonlinear = dll_raw_df %>% filter(model == m, lang == l, names == "nonlinear_baseline")
dll_nonlinear = target_df_nonlinear$logliks- baseline_df_nonlinear$logliks
dll_nonlinear = dll_nonlinear[!is.na(dll_nonlinear)]
dll_nonlinear = dll_nonlinear[dll_nonlinear > -10]
nonlinear_ttest = perm.test(dll_nonlinear, num.sim = 500)
comp_ttest = perm.test(dll_nonlinear, dll_linear, num.sim = 500)
dll_df_linear = data.frame(
m = mean(dll_linear), upper = mean(dll_linear) + (1.96 * std.error(dll_linear)), lower = mean(dll_linear) - (1.96 * std.error(dll_linear)),
ttest_pval = linear_ttest$p.value,
#Comparison information
ttest_pval_comp = comp_ttest$p.value,
# Meta info
lang = l, model = m, is_linear = "linear"
)
dll_df_nonlinear = data.frame(
m = mean(dll_nonlinear), upper = mean(dll_nonlinear) + (1.96 * std.error(dll_nonlinear)), lower = mean(dll_nonlinear) - (1.96 * std.error(dll_nonlinear)), ttest_pval = nonlinear_ttest$p.value,
#Comparison information
ttest_pval_comp = comp_ttest$p.value,
# Meta info
lang = l, model = m, is_linear = "nonlinear"
)
dll_df = rbind(dll_df_linear, dll_df_nonlinear)
linear_comp_df = rbind(linear_comp_df, dll_df)
}
}
linear_comp_df %>%
mutate(is_linear = if_else(is_linear == "linear", "Linear", "Non-linear")) %>%
#mutate(context = if_else(context == "long", "Long Context", "Short Context")) %>%
ggplot(aes(x = lang, y = m, color = is_linear, shape = is_linear)) +
#geom_hline(yintercept=0, color = "blue") +
geom_point(position = position_dodge(width = 0.5)) +
geom_errorbar(aes(ymin = lower, ymax= upper, width = 0.1), position = position_dodge(width = 0.5)) +
facet_grid(model~., labeller = labeller(model = as_labeller(c(mgpt_lc="mGPT\n(long)", mgpt_sc="mGPT\n(short)", monot_30m="monoT\n(30m)", monot_all="monoT\n(all)")))) +
scale_color_manual(values = c("#6488d6", "#29bc8b")) +
ylab("Delta Log Liklihood (per word)") +
labs(color = "Model Type") +
scale_shape(guide = "none") +
theme(
legend.position = "bottom",
axis.title.x = element_blank()
)
#ggsave("./images/dll_linear_comp.pdf", device ="pdf", width = 4, height = 4)
dll_raw_df %>%
filter(lang == "du" | lang == "ge") %>%
ggplot(aes(x=logliks, color = lang)) +
geom_density()
dll_raw_df %>%
filter(lang == "en") %>%
ggplot(aes(x=logliks, color = names)) +
geom_density()
dll_raw_df %>%
filter(lang == "ge") %>%
ggplot(aes(x=logliks, color = names)) +
geom_density()
shhh <- suppressPackageStartupMessages # It's a library, so shhh!
shhh(library( mgcv ))
shhh(library(dplyr))
shhh(library(ggplot2))
shhh(library(lme4))
shhh(library(tidymv))
shhh(library(gamlss))
shhh(library(gsubfn))
shhh(library(lmerTest))
shhh(library(tidyverse))
shhh(library(boot))
shhh(library(rsample))
shhh(library(plotrix))
shhh(library(ggrepel))
shhh(library(mgcv))
theme_set(theme_bw())
options(digits=4)
set.seed(444)
pipe_message = function(.data, status) {message(status); .data}
langs = c("du", "en", "fi", "ge", "gr", "he", "it", "sp", "ko", "tr", "ru", "et", "no")
models = c("mgpt_sc", "mgpt_lc", "monot_all", "monot_30m")
do_lags = function(df) {
result = df %>%
arrange(trialid, ianum) %>%
group_by(trialid) %>%
mutate(
prev_surp = lag(surp),
prev2_surp = lag(prev_surp),
prev_freq = lag(freq),
prev2_freq = lag(prev_freq),
prev_len = lag(len),
prev2_len = lag(prev_len),
prev_ent = lag(ent),
prev2_ent = lag(prev_ent)
) %>%
ungroup()
}
shhh <- suppressPackageStartupMessages # It's a library, so shhh!
shhh(library( mgcv ))
shhh(library(dplyr))
shhh(library(ggplot2))
shhh(library(lme4))
shhh(library(tidymv))
shhh(library(gamlss))
shhh(library(gsubfn))
shhh(library(lmerTest))
shhh(library(tidyverse))
shhh(library(boot))
shhh(library(rsample))
shhh(library(plotrix))
shhh(library(ggrepel))
shhh(library(mgcv))
theme_set(theme_bw())
options(digits=4)
set.seed(444)
pipe_message = function(.data, status) {message(status); .data}
langs = c("du", "en", "fi", "ge", "gr", "he", "it", "sp", "ko", "tr", "ru", "ee", "no")
models = c("mgpt_sc", "mgpt_lc", "monot_all", "monot_30m")
do_lags = function(df) {
result = df %>%
arrange(trialid, ianum) %>%
group_by(trialid) %>%
mutate(
prev_surp = lag(surp),
prev2_surp = lag(prev_surp),
prev_freq = lag(freq),
prev2_freq = lag(prev_freq),
prev_len = lag(len),
prev2_len = lag(prev_len),
prev_ent = lag(ent),
prev2_ent = lag(prev_ent)
) %>%
ungroup()
}
shhh <- suppressPackageStartupMessages # It's a library, so shhh!
shhh(library( mgcv ))
shhh(library(dplyr))
shhh(library(ggplot2))
shhh(library(lme4))
shhh(library(tidymv))
shhh(library(gamlss))
shhh(library(gsubfn))
shhh(library(lmerTest))
shhh(library(tidyverse))
shhh(library(boot))
shhh(library(rsample))
shhh(library(plotrix))
shhh(library(ggrepel))
shhh(library(mgcv))
library(jmuOutlier) # For paired permutation tests
options(JULIA_HOME = "/Applications/Julia-1.8.app/Contents/Resources/julia/bin/")
library(jglmm)
jglmm_setup()
theme_set(theme_bw())
options(digits=4)
options(dplyr.summarise.inform = FALSE)
set.seed(444)
langs = c("du", "en", "fi", "ge", "gr", "he", "it", "ko", "sp", "tr", "ru")
psychometrics = c("total_rt", "gaze_rt", "firstfix_rt")
models = c("mgpt_sc", "mgpt_lc", "monot_30m", "monot_all")
comps = c("target", "baseline")
get_model_coeffs = function(form, df, d_var, mixed_effects, num_folds=10){
folds <- cut(seq(1,nrow(df)),breaks=num_folds,labels=FALSE)
models = data.frame()
for(i in 1:num_folds){
testIndexes = which(folds==i,arr.ind=TRUE)
testData = df[testIndexes,]
trainData = df[-testIndexes,]
if(mixed_effects){
model = lmer(as.formula(form), data = trainData)
} else {
model = lm(as.formula(form), data = trainData)
}
models = rbind(models, model$coefficients)
}
return(models)
}
regression_form = "gaze_rt ~ surp + prev_surp + prev2_surp + ent + prev_ent + prev2_ent + freq + len + prev_freq + prev_len + prev2_freq + prev2_len"
# This is a dummy df just to get column names
df = read.csv(paste0("../data/merged_data/en.csv"))
df
regression_form = "gaze_rt ~ surp + prev_surp + prev2_surp + ent + prev_ent + prev2_ent + freq + len + prev_freq + prev_len + prev2_freq + prev2_len"
# This is a dummy df just to get column names
df = read.csv(paste0("../data/merged_data/en.csv"))
# This is just to get the column names
m = lm(as.formula(regression_form), data = df)
term_names = rownames(coef(summary(m,complete = TRUE)) )
xlang_coeff_df = data.frame()
for (l in langs) {
for (m in models) {
df = read.csv(paste0("../data/merged_data/", l, ".csv")) %>%
filter(model == m) %>%
mutate(
surp = scale(surp), prev_surp = scale(prev_surp), prev2_surp = scale(prev2_surp),
ent = scale(ent), prev_ent = scale(prev_ent), prev2_ent = scale(prev2_ent),
len = scale(len), prev_len = scale(prev_len), prev2_len = scale(prev2_len),
freq = scale(freq), prev_freq = scale(prev_freq), prev2_freq = scale(prev2_freq)
)
coeff_df = get_model_coeffs(regression_form, df=df, d_var = "gazr_rt", mixed_effects = F)
colnames(coeff_df) = term_names
xlang_coeff_df = rbind(xlang_coeff_df, coeff_df %>% mutate(lang = l, model = m))
}
}
coeff_plotting_df = xlang_coeff_df %>%
gather(name, value, c(1:length(term_names)-1)) %>%
group_by(lang, name, model) %>%
summarise(m = mean(value),
s = std.error(value),
upper = m + s * 1.96,
lower = m - s * 1.996) %>%
ungroup() %>%
filter(model != "mgpt_sc") %>%
filter(name %in% c("surp", "len", "freq", "ent", "prev_surp", "prev_ent", "prev_freq", "prev_len",
"prev2_surp", "prev2_len", "prev2_freq", "prev2_ent")) %>%
mutate(position = case_when(
name %in% c("surp", "len", "freq", "ent") ~ "0",
name %in% c("prev_surp", "prev_len", "prev_freq", "prev_ent") ~ "1",
name %in% c("prev2_surp", "prev2_len", "prev2_freq", "prev2_ent") ~ "2"
)) %>%
mutate(predictor = case_when(
name %in% c("surp", "prev_surp", "prev2_surp") ~ "Surprisal",
name %in% c("ent", "prev_ent", "prev2_ent") ~ "Entropy",
name %in% c("freq", "prev_freq", "prev2_freq") ~ "Frequency",
name %in% c("len", "prev_len", "prev2_len") ~ "Length"
)) %>%
mutate(predictor = factor(predictor, levels = c("Surprisal", "Entropy", "Frequency", "Length"))) %>%
mutate(position = factor(position, labels = c("w t", "w t-1", "w t-2"), levels = c("0", "1", "2")))
coeff_plotting_df %>%
ggplot(aes(x = position, y = m, fill = model)) +
geom_bar(stat="identity", position = position_dodge(width = 0.9)) +
geom_errorbar(aes(ymin=lower, ymax=upper), position = position_dodge(width = 0.9), width = 0.1) +
geom_hline(yintercept = 0, color = "black") +
ylab("Coefficient Estimate") +
facet_grid(predictor~lang, scales = "free_y") +
scale_x_discrete(labels = c(bquote(w[t]), bquote(w[t-1]), bquote(w[t-2]))) +
#scale_color_manual(values = c("#225ea8", "#41b6c4", "#a1dab4")) +
theme(
axis.title.x = element_blank(),
legend.position = "bottom"
)
#ggsave("./images/coeffs.pdf", width = 10, height = 5)
ggsave("./images/coeffs_scaled.pdf", width = 10, height = 5)
